// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newCustomBaseFieldMapping(db *gorm.DB, opts ...gen.DOOption) customBaseFieldMapping {
	_customBaseFieldMapping := customBaseFieldMapping{}

	_customBaseFieldMapping.customBaseFieldMappingDo.UseDB(db, opts...)
	_customBaseFieldMapping.customBaseFieldMappingDo.UseModel(&model.CustomBaseFieldMapping{})

	tableName := _customBaseFieldMapping.customBaseFieldMappingDo.TableName()
	_customBaseFieldMapping.ALL = field.NewAsterisk(tableName)
	_customBaseFieldMapping.CustomItemTypeID = field.NewInt32(tableName, "customItemTypeID")
	_customBaseFieldMapping.BaseFieldID = field.NewInt32(tableName, "baseFieldID")
	_customBaseFieldMapping.CustomFieldID = field.NewInt32(tableName, "customFieldID")

	_customBaseFieldMapping.fillFieldMap()

	return _customBaseFieldMapping
}

type customBaseFieldMapping struct {
	customBaseFieldMappingDo customBaseFieldMappingDo

	ALL              field.Asterisk
	CustomItemTypeID field.Int32
	BaseFieldID      field.Int32
	CustomFieldID    field.Int32

	fieldMap map[string]field.Expr
}

func (c customBaseFieldMapping) Table(newTableName string) *customBaseFieldMapping {
	c.customBaseFieldMappingDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customBaseFieldMapping) As(alias string) *customBaseFieldMapping {
	c.customBaseFieldMappingDo.DO = *(c.customBaseFieldMappingDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customBaseFieldMapping) updateTableName(table string) *customBaseFieldMapping {
	c.ALL = field.NewAsterisk(table)
	c.CustomItemTypeID = field.NewInt32(table, "customItemTypeID")
	c.BaseFieldID = field.NewInt32(table, "baseFieldID")
	c.CustomFieldID = field.NewInt32(table, "customFieldID")

	c.fillFieldMap()

	return c
}

func (c *customBaseFieldMapping) WithContext(ctx context.Context) *customBaseFieldMappingDo {
	return c.customBaseFieldMappingDo.WithContext(ctx)
}

func (c customBaseFieldMapping) TableName() string { return c.customBaseFieldMappingDo.TableName() }

func (c customBaseFieldMapping) Alias() string { return c.customBaseFieldMappingDo.Alias() }

func (c customBaseFieldMapping) Columns(cols ...field.Expr) gen.Columns {
	return c.customBaseFieldMappingDo.Columns(cols...)
}

func (c *customBaseFieldMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customBaseFieldMapping) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["customItemTypeID"] = c.CustomItemTypeID
	c.fieldMap["baseFieldID"] = c.BaseFieldID
	c.fieldMap["customFieldID"] = c.CustomFieldID
}

func (c customBaseFieldMapping) clone(db *gorm.DB) customBaseFieldMapping {
	c.customBaseFieldMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customBaseFieldMapping) replaceDB(db *gorm.DB) customBaseFieldMapping {
	c.customBaseFieldMappingDo.ReplaceDB(db)
	return c
}

type customBaseFieldMappingDo struct{ gen.DO }

func (c customBaseFieldMappingDo) Debug() *customBaseFieldMappingDo {
	return c.withDO(c.DO.Debug())
}

func (c customBaseFieldMappingDo) WithContext(ctx context.Context) *customBaseFieldMappingDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customBaseFieldMappingDo) ReadDB() *customBaseFieldMappingDo {
	return c.Clauses(dbresolver.Read)
}

func (c customBaseFieldMappingDo) WriteDB() *customBaseFieldMappingDo {
	return c.Clauses(dbresolver.Write)
}

func (c customBaseFieldMappingDo) Session(config *gorm.Session) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Session(config))
}

func (c customBaseFieldMappingDo) Clauses(conds ...clause.Expression) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customBaseFieldMappingDo) Returning(value interface{}, columns ...string) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customBaseFieldMappingDo) Not(conds ...gen.Condition) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customBaseFieldMappingDo) Or(conds ...gen.Condition) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customBaseFieldMappingDo) Select(conds ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customBaseFieldMappingDo) Where(conds ...gen.Condition) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customBaseFieldMappingDo) Order(conds ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customBaseFieldMappingDo) Distinct(cols ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customBaseFieldMappingDo) Omit(cols ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customBaseFieldMappingDo) Join(table schema.Tabler, on ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customBaseFieldMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customBaseFieldMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customBaseFieldMappingDo) Group(cols ...field.Expr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customBaseFieldMappingDo) Having(conds ...gen.Condition) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customBaseFieldMappingDo) Limit(limit int) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customBaseFieldMappingDo) Offset(offset int) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customBaseFieldMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customBaseFieldMappingDo) Unscoped() *customBaseFieldMappingDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customBaseFieldMappingDo) Create(values ...*model.CustomBaseFieldMapping) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customBaseFieldMappingDo) CreateInBatches(values []*model.CustomBaseFieldMapping, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customBaseFieldMappingDo) Save(values ...*model.CustomBaseFieldMapping) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customBaseFieldMappingDo) First() (*model.CustomBaseFieldMapping, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomBaseFieldMapping), nil
	}
}

func (c customBaseFieldMappingDo) Take() (*model.CustomBaseFieldMapping, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomBaseFieldMapping), nil
	}
}

func (c customBaseFieldMappingDo) Last() (*model.CustomBaseFieldMapping, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomBaseFieldMapping), nil
	}
}

func (c customBaseFieldMappingDo) Find() ([]*model.CustomBaseFieldMapping, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomBaseFieldMapping), err
}

func (c customBaseFieldMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomBaseFieldMapping, err error) {
	buf := make([]*model.CustomBaseFieldMapping, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customBaseFieldMappingDo) FindInBatches(result *[]*model.CustomBaseFieldMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customBaseFieldMappingDo) Attrs(attrs ...field.AssignExpr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customBaseFieldMappingDo) Assign(attrs ...field.AssignExpr) *customBaseFieldMappingDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customBaseFieldMappingDo) Joins(fields ...field.RelationField) *customBaseFieldMappingDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customBaseFieldMappingDo) Preload(fields ...field.RelationField) *customBaseFieldMappingDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customBaseFieldMappingDo) FirstOrInit() (*model.CustomBaseFieldMapping, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomBaseFieldMapping), nil
	}
}

func (c customBaseFieldMappingDo) FirstOrCreate() (*model.CustomBaseFieldMapping, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomBaseFieldMapping), nil
	}
}

func (c customBaseFieldMappingDo) FindByPage(offset int, limit int) (result []*model.CustomBaseFieldMapping, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customBaseFieldMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customBaseFieldMappingDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customBaseFieldMappingDo) Delete(models ...*model.CustomBaseFieldMapping) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customBaseFieldMappingDo) withDO(do gen.Dao) *customBaseFieldMappingDo {
	c.DO = *do.(*gen.DO)
	return c
}

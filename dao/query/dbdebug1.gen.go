// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newDbDebug1(db *gorm.DB, opts ...gen.DOOption) dbDebug1 {
	_dbDebug1 := dbDebug1{}

	_dbDebug1.dbDebug1Do.UseDB(db, opts...)
	_dbDebug1.dbDebug1Do.UseModel(&model.DbDebug1{})

	tableName := _dbDebug1.dbDebug1Do.TableName()
	_dbDebug1.ALL = field.NewAsterisk(tableName)
	_dbDebug1.A = field.NewInt32(tableName, "a")

	_dbDebug1.fillFieldMap()

	return _dbDebug1
}

type dbDebug1 struct {
	dbDebug1Do dbDebug1Do

	ALL field.Asterisk
	A   field.Int32

	fieldMap map[string]field.Expr
}

func (d dbDebug1) Table(newTableName string) *dbDebug1 {
	d.dbDebug1Do.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbDebug1) As(alias string) *dbDebug1 {
	d.dbDebug1Do.DO = *(d.dbDebug1Do.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbDebug1) updateTableName(table string) *dbDebug1 {
	d.ALL = field.NewAsterisk(table)
	d.A = field.NewInt32(table, "a")

	d.fillFieldMap()

	return d
}

func (d *dbDebug1) WithContext(ctx context.Context) *dbDebug1Do { return d.dbDebug1Do.WithContext(ctx) }

func (d dbDebug1) TableName() string { return d.dbDebug1Do.TableName() }

func (d dbDebug1) Alias() string { return d.dbDebug1Do.Alias() }

func (d dbDebug1) Columns(cols ...field.Expr) gen.Columns { return d.dbDebug1Do.Columns(cols...) }

func (d *dbDebug1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbDebug1) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 1)
	d.fieldMap["a"] = d.A
}

func (d dbDebug1) clone(db *gorm.DB) dbDebug1 {
	d.dbDebug1Do.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbDebug1) replaceDB(db *gorm.DB) dbDebug1 {
	d.dbDebug1Do.ReplaceDB(db)
	return d
}

type dbDebug1Do struct{ gen.DO }

func (d dbDebug1Do) Debug() *dbDebug1Do {
	return d.withDO(d.DO.Debug())
}

func (d dbDebug1Do) WithContext(ctx context.Context) *dbDebug1Do {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbDebug1Do) ReadDB() *dbDebug1Do {
	return d.Clauses(dbresolver.Read)
}

func (d dbDebug1Do) WriteDB() *dbDebug1Do {
	return d.Clauses(dbresolver.Write)
}

func (d dbDebug1Do) Session(config *gorm.Session) *dbDebug1Do {
	return d.withDO(d.DO.Session(config))
}

func (d dbDebug1Do) Clauses(conds ...clause.Expression) *dbDebug1Do {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbDebug1Do) Returning(value interface{}, columns ...string) *dbDebug1Do {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbDebug1Do) Not(conds ...gen.Condition) *dbDebug1Do {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbDebug1Do) Or(conds ...gen.Condition) *dbDebug1Do {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbDebug1Do) Select(conds ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbDebug1Do) Where(conds ...gen.Condition) *dbDebug1Do {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbDebug1Do) Order(conds ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbDebug1Do) Distinct(cols ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbDebug1Do) Omit(cols ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbDebug1Do) Join(table schema.Tabler, on ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbDebug1Do) LeftJoin(table schema.Tabler, on ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbDebug1Do) RightJoin(table schema.Tabler, on ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbDebug1Do) Group(cols ...field.Expr) *dbDebug1Do {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbDebug1Do) Having(conds ...gen.Condition) *dbDebug1Do {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbDebug1Do) Limit(limit int) *dbDebug1Do {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbDebug1Do) Offset(offset int) *dbDebug1Do {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbDebug1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *dbDebug1Do {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbDebug1Do) Unscoped() *dbDebug1Do {
	return d.withDO(d.DO.Unscoped())
}

func (d dbDebug1Do) Create(values ...*model.DbDebug1) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbDebug1Do) CreateInBatches(values []*model.DbDebug1, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbDebug1Do) Save(values ...*model.DbDebug1) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbDebug1Do) First() (*model.DbDebug1, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbDebug1), nil
	}
}

func (d dbDebug1Do) Take() (*model.DbDebug1, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbDebug1), nil
	}
}

func (d dbDebug1Do) Last() (*model.DbDebug1, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbDebug1), nil
	}
}

func (d dbDebug1Do) Find() ([]*model.DbDebug1, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbDebug1), err
}

func (d dbDebug1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbDebug1, err error) {
	buf := make([]*model.DbDebug1, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbDebug1Do) FindInBatches(result *[]*model.DbDebug1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbDebug1Do) Attrs(attrs ...field.AssignExpr) *dbDebug1Do {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbDebug1Do) Assign(attrs ...field.AssignExpr) *dbDebug1Do {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbDebug1Do) Joins(fields ...field.RelationField) *dbDebug1Do {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbDebug1Do) Preload(fields ...field.RelationField) *dbDebug1Do {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbDebug1Do) FirstOrInit() (*model.DbDebug1, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbDebug1), nil
	}
}

func (d dbDebug1Do) FirstOrCreate() (*model.DbDebug1, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbDebug1), nil
	}
}

func (d dbDebug1Do) FindByPage(offset int, limit int) (result []*model.DbDebug1, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbDebug1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbDebug1Do) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbDebug1Do) Delete(models ...*model.DbDebug1) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbDebug1Do) withDO(do gen.Dao) *dbDebug1Do {
	d.DO = *do.(*gen.DO)
	return d
}

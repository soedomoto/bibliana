// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newRelationPredicate(db *gorm.DB, opts ...gen.DOOption) relationPredicate {
	_relationPredicate := relationPredicate{}

	_relationPredicate.relationPredicateDo.UseDB(db, opts...)
	_relationPredicate.relationPredicateDo.UseModel(&model.RelationPredicate{})

	tableName := _relationPredicate.relationPredicateDo.TableName()
	_relationPredicate.ALL = field.NewAsterisk(tableName)
	_relationPredicate.PredicateID = field.NewInt32(tableName, "predicateID")
	_relationPredicate.Predicate = field.NewString(tableName, "predicate")

	_relationPredicate.fillFieldMap()

	return _relationPredicate
}

type relationPredicate struct {
	relationPredicateDo relationPredicateDo

	ALL         field.Asterisk
	PredicateID field.Int32
	Predicate   field.String

	fieldMap map[string]field.Expr
}

func (r relationPredicate) Table(newTableName string) *relationPredicate {
	r.relationPredicateDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r relationPredicate) As(alias string) *relationPredicate {
	r.relationPredicateDo.DO = *(r.relationPredicateDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *relationPredicate) updateTableName(table string) *relationPredicate {
	r.ALL = field.NewAsterisk(table)
	r.PredicateID = field.NewInt32(table, "predicateID")
	r.Predicate = field.NewString(table, "predicate")

	r.fillFieldMap()

	return r
}

func (r *relationPredicate) WithContext(ctx context.Context) *relationPredicateDo {
	return r.relationPredicateDo.WithContext(ctx)
}

func (r relationPredicate) TableName() string { return r.relationPredicateDo.TableName() }

func (r relationPredicate) Alias() string { return r.relationPredicateDo.Alias() }

func (r relationPredicate) Columns(cols ...field.Expr) gen.Columns {
	return r.relationPredicateDo.Columns(cols...)
}

func (r *relationPredicate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *relationPredicate) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["predicateID"] = r.PredicateID
	r.fieldMap["predicate"] = r.Predicate
}

func (r relationPredicate) clone(db *gorm.DB) relationPredicate {
	r.relationPredicateDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r relationPredicate) replaceDB(db *gorm.DB) relationPredicate {
	r.relationPredicateDo.ReplaceDB(db)
	return r
}

type relationPredicateDo struct{ gen.DO }

func (r relationPredicateDo) Debug() *relationPredicateDo {
	return r.withDO(r.DO.Debug())
}

func (r relationPredicateDo) WithContext(ctx context.Context) *relationPredicateDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r relationPredicateDo) ReadDB() *relationPredicateDo {
	return r.Clauses(dbresolver.Read)
}

func (r relationPredicateDo) WriteDB() *relationPredicateDo {
	return r.Clauses(dbresolver.Write)
}

func (r relationPredicateDo) Session(config *gorm.Session) *relationPredicateDo {
	return r.withDO(r.DO.Session(config))
}

func (r relationPredicateDo) Clauses(conds ...clause.Expression) *relationPredicateDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r relationPredicateDo) Returning(value interface{}, columns ...string) *relationPredicateDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r relationPredicateDo) Not(conds ...gen.Condition) *relationPredicateDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r relationPredicateDo) Or(conds ...gen.Condition) *relationPredicateDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r relationPredicateDo) Select(conds ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r relationPredicateDo) Where(conds ...gen.Condition) *relationPredicateDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r relationPredicateDo) Order(conds ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r relationPredicateDo) Distinct(cols ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r relationPredicateDo) Omit(cols ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r relationPredicateDo) Join(table schema.Tabler, on ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r relationPredicateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r relationPredicateDo) RightJoin(table schema.Tabler, on ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r relationPredicateDo) Group(cols ...field.Expr) *relationPredicateDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r relationPredicateDo) Having(conds ...gen.Condition) *relationPredicateDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r relationPredicateDo) Limit(limit int) *relationPredicateDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r relationPredicateDo) Offset(offset int) *relationPredicateDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r relationPredicateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *relationPredicateDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r relationPredicateDo) Unscoped() *relationPredicateDo {
	return r.withDO(r.DO.Unscoped())
}

func (r relationPredicateDo) Create(values ...*model.RelationPredicate) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r relationPredicateDo) CreateInBatches(values []*model.RelationPredicate, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r relationPredicateDo) Save(values ...*model.RelationPredicate) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r relationPredicateDo) First() (*model.RelationPredicate, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelationPredicate), nil
	}
}

func (r relationPredicateDo) Take() (*model.RelationPredicate, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelationPredicate), nil
	}
}

func (r relationPredicateDo) Last() (*model.RelationPredicate, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelationPredicate), nil
	}
}

func (r relationPredicateDo) Find() ([]*model.RelationPredicate, error) {
	result, err := r.DO.Find()
	return result.([]*model.RelationPredicate), err
}

func (r relationPredicateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RelationPredicate, err error) {
	buf := make([]*model.RelationPredicate, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r relationPredicateDo) FindInBatches(result *[]*model.RelationPredicate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r relationPredicateDo) Attrs(attrs ...field.AssignExpr) *relationPredicateDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r relationPredicateDo) Assign(attrs ...field.AssignExpr) *relationPredicateDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r relationPredicateDo) Joins(fields ...field.RelationField) *relationPredicateDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r relationPredicateDo) Preload(fields ...field.RelationField) *relationPredicateDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r relationPredicateDo) FirstOrInit() (*model.RelationPredicate, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelationPredicate), nil
	}
}

func (r relationPredicateDo) FirstOrCreate() (*model.RelationPredicate, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RelationPredicate), nil
	}
}

func (r relationPredicateDo) FindByPage(offset int, limit int) (result []*model.RelationPredicate, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r relationPredicateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r relationPredicateDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r relationPredicateDo) Delete(models ...*model.RelationPredicate) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *relationPredicateDo) withDO(do gen.Dao) *relationPredicateDo {
	r.DO = *do.(*gen.DO)
	return r
}

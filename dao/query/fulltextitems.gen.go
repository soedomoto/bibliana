// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newFulltextItem(db *gorm.DB, opts ...gen.DOOption) fulltextItem {
	_fulltextItem := fulltextItem{}

	_fulltextItem.fulltextItemDo.UseDB(db, opts...)
	_fulltextItem.fulltextItemDo.UseModel(&model.FulltextItem{})

	tableName := _fulltextItem.fulltextItemDo.TableName()
	_fulltextItem.ALL = field.NewAsterisk(tableName)
	_fulltextItem.ItemID = field.NewInt32(tableName, "itemID")
	_fulltextItem.IndexedPages = field.NewInt32(tableName, "indexedPages")
	_fulltextItem.TotalPages = field.NewInt32(tableName, "totalPages")
	_fulltextItem.IndexedChars = field.NewInt32(tableName, "indexedChars")
	_fulltextItem.TotalChars = field.NewInt32(tableName, "totalChars")
	_fulltextItem.Version = field.NewInt32(tableName, "version")
	_fulltextItem.Synced = field.NewInt32(tableName, "synced")

	_fulltextItem.fillFieldMap()

	return _fulltextItem
}

type fulltextItem struct {
	fulltextItemDo fulltextItemDo

	ALL          field.Asterisk
	ItemID       field.Int32
	IndexedPages field.Int32
	TotalPages   field.Int32
	IndexedChars field.Int32
	TotalChars   field.Int32
	Version      field.Int32
	Synced       field.Int32

	fieldMap map[string]field.Expr
}

func (f fulltextItem) Table(newTableName string) *fulltextItem {
	f.fulltextItemDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fulltextItem) As(alias string) *fulltextItem {
	f.fulltextItemDo.DO = *(f.fulltextItemDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fulltextItem) updateTableName(table string) *fulltextItem {
	f.ALL = field.NewAsterisk(table)
	f.ItemID = field.NewInt32(table, "itemID")
	f.IndexedPages = field.NewInt32(table, "indexedPages")
	f.TotalPages = field.NewInt32(table, "totalPages")
	f.IndexedChars = field.NewInt32(table, "indexedChars")
	f.TotalChars = field.NewInt32(table, "totalChars")
	f.Version = field.NewInt32(table, "version")
	f.Synced = field.NewInt32(table, "synced")

	f.fillFieldMap()

	return f
}

func (f *fulltextItem) WithContext(ctx context.Context) *fulltextItemDo {
	return f.fulltextItemDo.WithContext(ctx)
}

func (f fulltextItem) TableName() string { return f.fulltextItemDo.TableName() }

func (f fulltextItem) Alias() string { return f.fulltextItemDo.Alias() }

func (f fulltextItem) Columns(cols ...field.Expr) gen.Columns {
	return f.fulltextItemDo.Columns(cols...)
}

func (f *fulltextItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fulltextItem) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["itemID"] = f.ItemID
	f.fieldMap["indexedPages"] = f.IndexedPages
	f.fieldMap["totalPages"] = f.TotalPages
	f.fieldMap["indexedChars"] = f.IndexedChars
	f.fieldMap["totalChars"] = f.TotalChars
	f.fieldMap["version"] = f.Version
	f.fieldMap["synced"] = f.Synced
}

func (f fulltextItem) clone(db *gorm.DB) fulltextItem {
	f.fulltextItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fulltextItem) replaceDB(db *gorm.DB) fulltextItem {
	f.fulltextItemDo.ReplaceDB(db)
	return f
}

type fulltextItemDo struct{ gen.DO }

func (f fulltextItemDo) Debug() *fulltextItemDo {
	return f.withDO(f.DO.Debug())
}

func (f fulltextItemDo) WithContext(ctx context.Context) *fulltextItemDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fulltextItemDo) ReadDB() *fulltextItemDo {
	return f.Clauses(dbresolver.Read)
}

func (f fulltextItemDo) WriteDB() *fulltextItemDo {
	return f.Clauses(dbresolver.Write)
}

func (f fulltextItemDo) Session(config *gorm.Session) *fulltextItemDo {
	return f.withDO(f.DO.Session(config))
}

func (f fulltextItemDo) Clauses(conds ...clause.Expression) *fulltextItemDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fulltextItemDo) Returning(value interface{}, columns ...string) *fulltextItemDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fulltextItemDo) Not(conds ...gen.Condition) *fulltextItemDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fulltextItemDo) Or(conds ...gen.Condition) *fulltextItemDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fulltextItemDo) Select(conds ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fulltextItemDo) Where(conds ...gen.Condition) *fulltextItemDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fulltextItemDo) Order(conds ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fulltextItemDo) Distinct(cols ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fulltextItemDo) Omit(cols ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fulltextItemDo) Join(table schema.Tabler, on ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fulltextItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fulltextItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fulltextItemDo) Group(cols ...field.Expr) *fulltextItemDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fulltextItemDo) Having(conds ...gen.Condition) *fulltextItemDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fulltextItemDo) Limit(limit int) *fulltextItemDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fulltextItemDo) Offset(offset int) *fulltextItemDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fulltextItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *fulltextItemDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fulltextItemDo) Unscoped() *fulltextItemDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fulltextItemDo) Create(values ...*model.FulltextItem) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fulltextItemDo) CreateInBatches(values []*model.FulltextItem, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fulltextItemDo) Save(values ...*model.FulltextItem) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fulltextItemDo) First() (*model.FulltextItem, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulltextItem), nil
	}
}

func (f fulltextItemDo) Take() (*model.FulltextItem, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulltextItem), nil
	}
}

func (f fulltextItemDo) Last() (*model.FulltextItem, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulltextItem), nil
	}
}

func (f fulltextItemDo) Find() ([]*model.FulltextItem, error) {
	result, err := f.DO.Find()
	return result.([]*model.FulltextItem), err
}

func (f fulltextItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FulltextItem, err error) {
	buf := make([]*model.FulltextItem, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fulltextItemDo) FindInBatches(result *[]*model.FulltextItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fulltextItemDo) Attrs(attrs ...field.AssignExpr) *fulltextItemDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fulltextItemDo) Assign(attrs ...field.AssignExpr) *fulltextItemDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fulltextItemDo) Joins(fields ...field.RelationField) *fulltextItemDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fulltextItemDo) Preload(fields ...field.RelationField) *fulltextItemDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fulltextItemDo) FirstOrInit() (*model.FulltextItem, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulltextItem), nil
	}
}

func (f fulltextItemDo) FirstOrCreate() (*model.FulltextItem, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulltextItem), nil
	}
}

func (f fulltextItemDo) FindByPage(offset int, limit int) (result []*model.FulltextItem, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fulltextItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fulltextItemDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fulltextItemDo) Delete(models ...*model.FulltextItem) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fulltextItemDo) withDO(do gen.Dao) *fulltextItemDo {
	f.DO = *do.(*gen.DO)
	return f
}

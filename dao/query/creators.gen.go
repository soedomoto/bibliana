// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newCreator(db *gorm.DB, opts ...gen.DOOption) creator {
	_creator := creator{}

	_creator.creatorDo.UseDB(db, opts...)
	_creator.creatorDo.UseModel(&model.Creator{})

	tableName := _creator.creatorDo.TableName()
	_creator.ALL = field.NewAsterisk(tableName)
	_creator.CreatorID = field.NewInt32(tableName, "creatorID")
	_creator.FirstName = field.NewString(tableName, "firstName")
	_creator.LastName = field.NewString(tableName, "lastName")
	_creator.FieldMode = field.NewInt32(tableName, "fieldMode")

	_creator.fillFieldMap()

	return _creator
}

type creator struct {
	creatorDo creatorDo

	ALL       field.Asterisk
	CreatorID field.Int32
	FirstName field.String
	LastName  field.String
	FieldMode field.Int32

	fieldMap map[string]field.Expr
}

func (c creator) Table(newTableName string) *creator {
	c.creatorDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c creator) As(alias string) *creator {
	c.creatorDo.DO = *(c.creatorDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *creator) updateTableName(table string) *creator {
	c.ALL = field.NewAsterisk(table)
	c.CreatorID = field.NewInt32(table, "creatorID")
	c.FirstName = field.NewString(table, "firstName")
	c.LastName = field.NewString(table, "lastName")
	c.FieldMode = field.NewInt32(table, "fieldMode")

	c.fillFieldMap()

	return c
}

func (c *creator) WithContext(ctx context.Context) *creatorDo { return c.creatorDo.WithContext(ctx) }

func (c creator) TableName() string { return c.creatorDo.TableName() }

func (c creator) Alias() string { return c.creatorDo.Alias() }

func (c creator) Columns(cols ...field.Expr) gen.Columns { return c.creatorDo.Columns(cols...) }

func (c *creator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *creator) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["creatorID"] = c.CreatorID
	c.fieldMap["firstName"] = c.FirstName
	c.fieldMap["lastName"] = c.LastName
	c.fieldMap["fieldMode"] = c.FieldMode
}

func (c creator) clone(db *gorm.DB) creator {
	c.creatorDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c creator) replaceDB(db *gorm.DB) creator {
	c.creatorDo.ReplaceDB(db)
	return c
}

type creatorDo struct{ gen.DO }

func (c creatorDo) Debug() *creatorDo {
	return c.withDO(c.DO.Debug())
}

func (c creatorDo) WithContext(ctx context.Context) *creatorDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c creatorDo) ReadDB() *creatorDo {
	return c.Clauses(dbresolver.Read)
}

func (c creatorDo) WriteDB() *creatorDo {
	return c.Clauses(dbresolver.Write)
}

func (c creatorDo) Session(config *gorm.Session) *creatorDo {
	return c.withDO(c.DO.Session(config))
}

func (c creatorDo) Clauses(conds ...clause.Expression) *creatorDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c creatorDo) Returning(value interface{}, columns ...string) *creatorDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c creatorDo) Not(conds ...gen.Condition) *creatorDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c creatorDo) Or(conds ...gen.Condition) *creatorDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c creatorDo) Select(conds ...field.Expr) *creatorDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c creatorDo) Where(conds ...gen.Condition) *creatorDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c creatorDo) Order(conds ...field.Expr) *creatorDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c creatorDo) Distinct(cols ...field.Expr) *creatorDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c creatorDo) Omit(cols ...field.Expr) *creatorDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c creatorDo) Join(table schema.Tabler, on ...field.Expr) *creatorDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c creatorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *creatorDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c creatorDo) RightJoin(table schema.Tabler, on ...field.Expr) *creatorDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c creatorDo) Group(cols ...field.Expr) *creatorDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c creatorDo) Having(conds ...gen.Condition) *creatorDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c creatorDo) Limit(limit int) *creatorDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c creatorDo) Offset(offset int) *creatorDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c creatorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *creatorDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c creatorDo) Unscoped() *creatorDo {
	return c.withDO(c.DO.Unscoped())
}

func (c creatorDo) Create(values ...*model.Creator) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c creatorDo) CreateInBatches(values []*model.Creator, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c creatorDo) Save(values ...*model.Creator) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c creatorDo) First() (*model.Creator, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Creator), nil
	}
}

func (c creatorDo) Take() (*model.Creator, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Creator), nil
	}
}

func (c creatorDo) Last() (*model.Creator, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Creator), nil
	}
}

func (c creatorDo) Find() ([]*model.Creator, error) {
	result, err := c.DO.Find()
	return result.([]*model.Creator), err
}

func (c creatorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Creator, err error) {
	buf := make([]*model.Creator, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c creatorDo) FindInBatches(result *[]*model.Creator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c creatorDo) Attrs(attrs ...field.AssignExpr) *creatorDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c creatorDo) Assign(attrs ...field.AssignExpr) *creatorDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c creatorDo) Joins(fields ...field.RelationField) *creatorDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c creatorDo) Preload(fields ...field.RelationField) *creatorDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c creatorDo) FirstOrInit() (*model.Creator, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Creator), nil
	}
}

func (c creatorDo) FirstOrCreate() (*model.Creator, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Creator), nil
	}
}

func (c creatorDo) FindByPage(offset int, limit int) (result []*model.Creator, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c creatorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c creatorDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c creatorDo) Delete(models ...*model.Creator) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *creatorDo) withDO(do gen.Dao) *creatorDo {
	c.DO = *do.(*gen.DO)
	return c
}

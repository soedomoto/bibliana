// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newRetractedItem(db *gorm.DB, opts ...gen.DOOption) retractedItem {
	_retractedItem := retractedItem{}

	_retractedItem.retractedItemDo.UseDB(db, opts...)
	_retractedItem.retractedItemDo.UseModel(&model.RetractedItem{})

	tableName := _retractedItem.retractedItemDo.TableName()
	_retractedItem.ALL = field.NewAsterisk(tableName)
	_retractedItem.ItemID = field.NewInt32(tableName, "itemID")
	_retractedItem.Data = field.NewString(tableName, "data")
	_retractedItem.Flag = field.NewInt32(tableName, "flag")

	_retractedItem.fillFieldMap()

	return _retractedItem
}

type retractedItem struct {
	retractedItemDo retractedItemDo

	ALL    field.Asterisk
	ItemID field.Int32
	Data   field.String
	Flag   field.Int32

	fieldMap map[string]field.Expr
}

func (r retractedItem) Table(newTableName string) *retractedItem {
	r.retractedItemDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r retractedItem) As(alias string) *retractedItem {
	r.retractedItemDo.DO = *(r.retractedItemDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *retractedItem) updateTableName(table string) *retractedItem {
	r.ALL = field.NewAsterisk(table)
	r.ItemID = field.NewInt32(table, "itemID")
	r.Data = field.NewString(table, "data")
	r.Flag = field.NewInt32(table, "flag")

	r.fillFieldMap()

	return r
}

func (r *retractedItem) WithContext(ctx context.Context) *retractedItemDo {
	return r.retractedItemDo.WithContext(ctx)
}

func (r retractedItem) TableName() string { return r.retractedItemDo.TableName() }

func (r retractedItem) Alias() string { return r.retractedItemDo.Alias() }

func (r retractedItem) Columns(cols ...field.Expr) gen.Columns {
	return r.retractedItemDo.Columns(cols...)
}

func (r *retractedItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *retractedItem) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["itemID"] = r.ItemID
	r.fieldMap["data"] = r.Data
	r.fieldMap["flag"] = r.Flag
}

func (r retractedItem) clone(db *gorm.DB) retractedItem {
	r.retractedItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r retractedItem) replaceDB(db *gorm.DB) retractedItem {
	r.retractedItemDo.ReplaceDB(db)
	return r
}

type retractedItemDo struct{ gen.DO }

func (r retractedItemDo) Debug() *retractedItemDo {
	return r.withDO(r.DO.Debug())
}

func (r retractedItemDo) WithContext(ctx context.Context) *retractedItemDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r retractedItemDo) ReadDB() *retractedItemDo {
	return r.Clauses(dbresolver.Read)
}

func (r retractedItemDo) WriteDB() *retractedItemDo {
	return r.Clauses(dbresolver.Write)
}

func (r retractedItemDo) Session(config *gorm.Session) *retractedItemDo {
	return r.withDO(r.DO.Session(config))
}

func (r retractedItemDo) Clauses(conds ...clause.Expression) *retractedItemDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r retractedItemDo) Returning(value interface{}, columns ...string) *retractedItemDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r retractedItemDo) Not(conds ...gen.Condition) *retractedItemDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r retractedItemDo) Or(conds ...gen.Condition) *retractedItemDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r retractedItemDo) Select(conds ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r retractedItemDo) Where(conds ...gen.Condition) *retractedItemDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r retractedItemDo) Order(conds ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r retractedItemDo) Distinct(cols ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r retractedItemDo) Omit(cols ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r retractedItemDo) Join(table schema.Tabler, on ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r retractedItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r retractedItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r retractedItemDo) Group(cols ...field.Expr) *retractedItemDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r retractedItemDo) Having(conds ...gen.Condition) *retractedItemDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r retractedItemDo) Limit(limit int) *retractedItemDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r retractedItemDo) Offset(offset int) *retractedItemDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r retractedItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *retractedItemDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r retractedItemDo) Unscoped() *retractedItemDo {
	return r.withDO(r.DO.Unscoped())
}

func (r retractedItemDo) Create(values ...*model.RetractedItem) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r retractedItemDo) CreateInBatches(values []*model.RetractedItem, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r retractedItemDo) Save(values ...*model.RetractedItem) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r retractedItemDo) First() (*model.RetractedItem, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetractedItem), nil
	}
}

func (r retractedItemDo) Take() (*model.RetractedItem, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetractedItem), nil
	}
}

func (r retractedItemDo) Last() (*model.RetractedItem, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetractedItem), nil
	}
}

func (r retractedItemDo) Find() ([]*model.RetractedItem, error) {
	result, err := r.DO.Find()
	return result.([]*model.RetractedItem), err
}

func (r retractedItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RetractedItem, err error) {
	buf := make([]*model.RetractedItem, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r retractedItemDo) FindInBatches(result *[]*model.RetractedItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r retractedItemDo) Attrs(attrs ...field.AssignExpr) *retractedItemDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r retractedItemDo) Assign(attrs ...field.AssignExpr) *retractedItemDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r retractedItemDo) Joins(fields ...field.RelationField) *retractedItemDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r retractedItemDo) Preload(fields ...field.RelationField) *retractedItemDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r retractedItemDo) FirstOrInit() (*model.RetractedItem, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetractedItem), nil
	}
}

func (r retractedItemDo) FirstOrCreate() (*model.RetractedItem, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetractedItem), nil
	}
}

func (r retractedItemDo) FindByPage(offset int, limit int) (result []*model.RetractedItem, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r retractedItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r retractedItemDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r retractedItemDo) Delete(models ...*model.RetractedItem) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *retractedItemDo) withDO(do gen.Dao) *retractedItemDo {
	r.DO = *do.(*gen.DO)
	return r
}

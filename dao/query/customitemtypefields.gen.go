// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newCustomItemTypeField(db *gorm.DB, opts ...gen.DOOption) customItemTypeField {
	_customItemTypeField := customItemTypeField{}

	_customItemTypeField.customItemTypeFieldDo.UseDB(db, opts...)
	_customItemTypeField.customItemTypeFieldDo.UseModel(&model.CustomItemTypeField{})

	tableName := _customItemTypeField.customItemTypeFieldDo.TableName()
	_customItemTypeField.ALL = field.NewAsterisk(tableName)
	_customItemTypeField.CustomItemTypeID = field.NewInt32(tableName, "customItemTypeID")
	_customItemTypeField.FieldID = field.NewInt32(tableName, "fieldID")
	_customItemTypeField.CustomFieldID = field.NewInt32(tableName, "customFieldID")
	_customItemTypeField.Hide = field.NewInt32(tableName, "hide")
	_customItemTypeField.OrderIndex = field.NewInt32(tableName, "orderIndex")

	_customItemTypeField.fillFieldMap()

	return _customItemTypeField
}

type customItemTypeField struct {
	customItemTypeFieldDo customItemTypeFieldDo

	ALL              field.Asterisk
	CustomItemTypeID field.Int32
	FieldID          field.Int32
	CustomFieldID    field.Int32
	Hide             field.Int32
	OrderIndex       field.Int32

	fieldMap map[string]field.Expr
}

func (c customItemTypeField) Table(newTableName string) *customItemTypeField {
	c.customItemTypeFieldDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customItemTypeField) As(alias string) *customItemTypeField {
	c.customItemTypeFieldDo.DO = *(c.customItemTypeFieldDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customItemTypeField) updateTableName(table string) *customItemTypeField {
	c.ALL = field.NewAsterisk(table)
	c.CustomItemTypeID = field.NewInt32(table, "customItemTypeID")
	c.FieldID = field.NewInt32(table, "fieldID")
	c.CustomFieldID = field.NewInt32(table, "customFieldID")
	c.Hide = field.NewInt32(table, "hide")
	c.OrderIndex = field.NewInt32(table, "orderIndex")

	c.fillFieldMap()

	return c
}

func (c *customItemTypeField) WithContext(ctx context.Context) *customItemTypeFieldDo {
	return c.customItemTypeFieldDo.WithContext(ctx)
}

func (c customItemTypeField) TableName() string { return c.customItemTypeFieldDo.TableName() }

func (c customItemTypeField) Alias() string { return c.customItemTypeFieldDo.Alias() }

func (c customItemTypeField) Columns(cols ...field.Expr) gen.Columns {
	return c.customItemTypeFieldDo.Columns(cols...)
}

func (c *customItemTypeField) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customItemTypeField) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["customItemTypeID"] = c.CustomItemTypeID
	c.fieldMap["fieldID"] = c.FieldID
	c.fieldMap["customFieldID"] = c.CustomFieldID
	c.fieldMap["hide"] = c.Hide
	c.fieldMap["orderIndex"] = c.OrderIndex
}

func (c customItemTypeField) clone(db *gorm.DB) customItemTypeField {
	c.customItemTypeFieldDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customItemTypeField) replaceDB(db *gorm.DB) customItemTypeField {
	c.customItemTypeFieldDo.ReplaceDB(db)
	return c
}

type customItemTypeFieldDo struct{ gen.DO }

func (c customItemTypeFieldDo) Debug() *customItemTypeFieldDo {
	return c.withDO(c.DO.Debug())
}

func (c customItemTypeFieldDo) WithContext(ctx context.Context) *customItemTypeFieldDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customItemTypeFieldDo) ReadDB() *customItemTypeFieldDo {
	return c.Clauses(dbresolver.Read)
}

func (c customItemTypeFieldDo) WriteDB() *customItemTypeFieldDo {
	return c.Clauses(dbresolver.Write)
}

func (c customItemTypeFieldDo) Session(config *gorm.Session) *customItemTypeFieldDo {
	return c.withDO(c.DO.Session(config))
}

func (c customItemTypeFieldDo) Clauses(conds ...clause.Expression) *customItemTypeFieldDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customItemTypeFieldDo) Returning(value interface{}, columns ...string) *customItemTypeFieldDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customItemTypeFieldDo) Not(conds ...gen.Condition) *customItemTypeFieldDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customItemTypeFieldDo) Or(conds ...gen.Condition) *customItemTypeFieldDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customItemTypeFieldDo) Select(conds ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customItemTypeFieldDo) Where(conds ...gen.Condition) *customItemTypeFieldDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customItemTypeFieldDo) Order(conds ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customItemTypeFieldDo) Distinct(cols ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customItemTypeFieldDo) Omit(cols ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customItemTypeFieldDo) Join(table schema.Tabler, on ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customItemTypeFieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customItemTypeFieldDo) RightJoin(table schema.Tabler, on ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customItemTypeFieldDo) Group(cols ...field.Expr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customItemTypeFieldDo) Having(conds ...gen.Condition) *customItemTypeFieldDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customItemTypeFieldDo) Limit(limit int) *customItemTypeFieldDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customItemTypeFieldDo) Offset(offset int) *customItemTypeFieldDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customItemTypeFieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *customItemTypeFieldDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customItemTypeFieldDo) Unscoped() *customItemTypeFieldDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customItemTypeFieldDo) Create(values ...*model.CustomItemTypeField) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customItemTypeFieldDo) CreateInBatches(values []*model.CustomItemTypeField, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customItemTypeFieldDo) Save(values ...*model.CustomItemTypeField) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customItemTypeFieldDo) First() (*model.CustomItemTypeField, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomItemTypeField), nil
	}
}

func (c customItemTypeFieldDo) Take() (*model.CustomItemTypeField, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomItemTypeField), nil
	}
}

func (c customItemTypeFieldDo) Last() (*model.CustomItemTypeField, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomItemTypeField), nil
	}
}

func (c customItemTypeFieldDo) Find() ([]*model.CustomItemTypeField, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomItemTypeField), err
}

func (c customItemTypeFieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomItemTypeField, err error) {
	buf := make([]*model.CustomItemTypeField, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customItemTypeFieldDo) FindInBatches(result *[]*model.CustomItemTypeField, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customItemTypeFieldDo) Attrs(attrs ...field.AssignExpr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customItemTypeFieldDo) Assign(attrs ...field.AssignExpr) *customItemTypeFieldDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customItemTypeFieldDo) Joins(fields ...field.RelationField) *customItemTypeFieldDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customItemTypeFieldDo) Preload(fields ...field.RelationField) *customItemTypeFieldDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customItemTypeFieldDo) FirstOrInit() (*model.CustomItemTypeField, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomItemTypeField), nil
	}
}

func (c customItemTypeFieldDo) FirstOrCreate() (*model.CustomItemTypeField, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomItemTypeField), nil
	}
}

func (c customItemTypeFieldDo) FindByPage(offset int, limit int) (result []*model.CustomItemTypeField, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customItemTypeFieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customItemTypeFieldDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customItemTypeFieldDo) Delete(models ...*model.CustomItemTypeField) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customItemTypeFieldDo) withDO(do gen.Dao) *customItemTypeFieldDo {
	c.DO = *do.(*gen.DO)
	return c
}

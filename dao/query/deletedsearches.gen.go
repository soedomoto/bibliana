// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newDeletedSearch(db *gorm.DB, opts ...gen.DOOption) deletedSearch {
	_deletedSearch := deletedSearch{}

	_deletedSearch.deletedSearchDo.UseDB(db, opts...)
	_deletedSearch.deletedSearchDo.UseModel(&model.DeletedSearch{})

	tableName := _deletedSearch.deletedSearchDo.TableName()
	_deletedSearch.ALL = field.NewAsterisk(tableName)
	_deletedSearch.SavedSearchID = field.NewInt32(tableName, "savedSearchID")
	_deletedSearch.DateDeleted = field.NewString(tableName, "dateDeleted")

	_deletedSearch.fillFieldMap()

	return _deletedSearch
}

type deletedSearch struct {
	deletedSearchDo deletedSearchDo

	ALL           field.Asterisk
	SavedSearchID field.Int32
	DateDeleted   field.String

	fieldMap map[string]field.Expr
}

func (d deletedSearch) Table(newTableName string) *deletedSearch {
	d.deletedSearchDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deletedSearch) As(alias string) *deletedSearch {
	d.deletedSearchDo.DO = *(d.deletedSearchDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deletedSearch) updateTableName(table string) *deletedSearch {
	d.ALL = field.NewAsterisk(table)
	d.SavedSearchID = field.NewInt32(table, "savedSearchID")
	d.DateDeleted = field.NewString(table, "dateDeleted")

	d.fillFieldMap()

	return d
}

func (d *deletedSearch) WithContext(ctx context.Context) *deletedSearchDo {
	return d.deletedSearchDo.WithContext(ctx)
}

func (d deletedSearch) TableName() string { return d.deletedSearchDo.TableName() }

func (d deletedSearch) Alias() string { return d.deletedSearchDo.Alias() }

func (d deletedSearch) Columns(cols ...field.Expr) gen.Columns {
	return d.deletedSearchDo.Columns(cols...)
}

func (d *deletedSearch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deletedSearch) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["savedSearchID"] = d.SavedSearchID
	d.fieldMap["dateDeleted"] = d.DateDeleted
}

func (d deletedSearch) clone(db *gorm.DB) deletedSearch {
	d.deletedSearchDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deletedSearch) replaceDB(db *gorm.DB) deletedSearch {
	d.deletedSearchDo.ReplaceDB(db)
	return d
}

type deletedSearchDo struct{ gen.DO }

func (d deletedSearchDo) Debug() *deletedSearchDo {
	return d.withDO(d.DO.Debug())
}

func (d deletedSearchDo) WithContext(ctx context.Context) *deletedSearchDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deletedSearchDo) ReadDB() *deletedSearchDo {
	return d.Clauses(dbresolver.Read)
}

func (d deletedSearchDo) WriteDB() *deletedSearchDo {
	return d.Clauses(dbresolver.Write)
}

func (d deletedSearchDo) Session(config *gorm.Session) *deletedSearchDo {
	return d.withDO(d.DO.Session(config))
}

func (d deletedSearchDo) Clauses(conds ...clause.Expression) *deletedSearchDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deletedSearchDo) Returning(value interface{}, columns ...string) *deletedSearchDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deletedSearchDo) Not(conds ...gen.Condition) *deletedSearchDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deletedSearchDo) Or(conds ...gen.Condition) *deletedSearchDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deletedSearchDo) Select(conds ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deletedSearchDo) Where(conds ...gen.Condition) *deletedSearchDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deletedSearchDo) Order(conds ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deletedSearchDo) Distinct(cols ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deletedSearchDo) Omit(cols ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deletedSearchDo) Join(table schema.Tabler, on ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deletedSearchDo) LeftJoin(table schema.Tabler, on ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deletedSearchDo) RightJoin(table schema.Tabler, on ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deletedSearchDo) Group(cols ...field.Expr) *deletedSearchDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deletedSearchDo) Having(conds ...gen.Condition) *deletedSearchDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deletedSearchDo) Limit(limit int) *deletedSearchDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deletedSearchDo) Offset(offset int) *deletedSearchDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deletedSearchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *deletedSearchDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deletedSearchDo) Unscoped() *deletedSearchDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deletedSearchDo) Create(values ...*model.DeletedSearch) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deletedSearchDo) CreateInBatches(values []*model.DeletedSearch, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deletedSearchDo) Save(values ...*model.DeletedSearch) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deletedSearchDo) First() (*model.DeletedSearch, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedSearch), nil
	}
}

func (d deletedSearchDo) Take() (*model.DeletedSearch, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedSearch), nil
	}
}

func (d deletedSearchDo) Last() (*model.DeletedSearch, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedSearch), nil
	}
}

func (d deletedSearchDo) Find() ([]*model.DeletedSearch, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeletedSearch), err
}

func (d deletedSearchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeletedSearch, err error) {
	buf := make([]*model.DeletedSearch, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deletedSearchDo) FindInBatches(result *[]*model.DeletedSearch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deletedSearchDo) Attrs(attrs ...field.AssignExpr) *deletedSearchDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deletedSearchDo) Assign(attrs ...field.AssignExpr) *deletedSearchDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deletedSearchDo) Joins(fields ...field.RelationField) *deletedSearchDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deletedSearchDo) Preload(fields ...field.RelationField) *deletedSearchDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deletedSearchDo) FirstOrInit() (*model.DeletedSearch, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedSearch), nil
	}
}

func (d deletedSearchDo) FirstOrCreate() (*model.DeletedSearch, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedSearch), nil
	}
}

func (d deletedSearchDo) FindByPage(offset int, limit int) (result []*model.DeletedSearch, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deletedSearchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deletedSearchDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deletedSearchDo) Delete(models ...*model.DeletedSearch) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deletedSearchDo) withDO(do gen.Dao) *deletedSearchDo {
	d.DO = *do.(*gen.DO)
	return d
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newSyncQueue(db *gorm.DB, opts ...gen.DOOption) syncQueue {
	_syncQueue := syncQueue{}

	_syncQueue.syncQueueDo.UseDB(db, opts...)
	_syncQueue.syncQueueDo.UseModel(&model.SyncQueue{})

	tableName := _syncQueue.syncQueueDo.TableName()
	_syncQueue.ALL = field.NewAsterisk(tableName)
	_syncQueue.LibraryID = field.NewInt32(tableName, "libraryID")
	_syncQueue.Key = field.NewString(tableName, "key")
	_syncQueue.SyncObjectTypeID = field.NewInt32(tableName, "syncObjectTypeID")
	_syncQueue.LastCheck = field.NewTime(tableName, "lastCheck")
	_syncQueue.Tries = field.NewInt32(tableName, "tries")

	_syncQueue.fillFieldMap()

	return _syncQueue
}

type syncQueue struct {
	syncQueueDo syncQueueDo

	ALL              field.Asterisk
	LibraryID        field.Int32
	Key              field.String
	SyncObjectTypeID field.Int32
	LastCheck        field.Time
	Tries            field.Int32

	fieldMap map[string]field.Expr
}

func (s syncQueue) Table(newTableName string) *syncQueue {
	s.syncQueueDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syncQueue) As(alias string) *syncQueue {
	s.syncQueueDo.DO = *(s.syncQueueDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syncQueue) updateTableName(table string) *syncQueue {
	s.ALL = field.NewAsterisk(table)
	s.LibraryID = field.NewInt32(table, "libraryID")
	s.Key = field.NewString(table, "key")
	s.SyncObjectTypeID = field.NewInt32(table, "syncObjectTypeID")
	s.LastCheck = field.NewTime(table, "lastCheck")
	s.Tries = field.NewInt32(table, "tries")

	s.fillFieldMap()

	return s
}

func (s *syncQueue) WithContext(ctx context.Context) *syncQueueDo {
	return s.syncQueueDo.WithContext(ctx)
}

func (s syncQueue) TableName() string { return s.syncQueueDo.TableName() }

func (s syncQueue) Alias() string { return s.syncQueueDo.Alias() }

func (s syncQueue) Columns(cols ...field.Expr) gen.Columns { return s.syncQueueDo.Columns(cols...) }

func (s *syncQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syncQueue) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["libraryID"] = s.LibraryID
	s.fieldMap["key"] = s.Key
	s.fieldMap["syncObjectTypeID"] = s.SyncObjectTypeID
	s.fieldMap["lastCheck"] = s.LastCheck
	s.fieldMap["tries"] = s.Tries
}

func (s syncQueue) clone(db *gorm.DB) syncQueue {
	s.syncQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syncQueue) replaceDB(db *gorm.DB) syncQueue {
	s.syncQueueDo.ReplaceDB(db)
	return s
}

type syncQueueDo struct{ gen.DO }

func (s syncQueueDo) Debug() *syncQueueDo {
	return s.withDO(s.DO.Debug())
}

func (s syncQueueDo) WithContext(ctx context.Context) *syncQueueDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syncQueueDo) ReadDB() *syncQueueDo {
	return s.Clauses(dbresolver.Read)
}

func (s syncQueueDo) WriteDB() *syncQueueDo {
	return s.Clauses(dbresolver.Write)
}

func (s syncQueueDo) Session(config *gorm.Session) *syncQueueDo {
	return s.withDO(s.DO.Session(config))
}

func (s syncQueueDo) Clauses(conds ...clause.Expression) *syncQueueDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syncQueueDo) Returning(value interface{}, columns ...string) *syncQueueDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syncQueueDo) Not(conds ...gen.Condition) *syncQueueDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syncQueueDo) Or(conds ...gen.Condition) *syncQueueDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syncQueueDo) Select(conds ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syncQueueDo) Where(conds ...gen.Condition) *syncQueueDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syncQueueDo) Order(conds ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syncQueueDo) Distinct(cols ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syncQueueDo) Omit(cols ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syncQueueDo) Join(table schema.Tabler, on ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syncQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syncQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syncQueueDo) Group(cols ...field.Expr) *syncQueueDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syncQueueDo) Having(conds ...gen.Condition) *syncQueueDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syncQueueDo) Limit(limit int) *syncQueueDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syncQueueDo) Offset(offset int) *syncQueueDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syncQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *syncQueueDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syncQueueDo) Unscoped() *syncQueueDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syncQueueDo) Create(values ...*model.SyncQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syncQueueDo) CreateInBatches(values []*model.SyncQueue, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syncQueueDo) Save(values ...*model.SyncQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syncQueueDo) First() (*model.SyncQueue, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncQueue), nil
	}
}

func (s syncQueueDo) Take() (*model.SyncQueue, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncQueue), nil
	}
}

func (s syncQueueDo) Last() (*model.SyncQueue, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncQueue), nil
	}
}

func (s syncQueueDo) Find() ([]*model.SyncQueue, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyncQueue), err
}

func (s syncQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncQueue, err error) {
	buf := make([]*model.SyncQueue, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syncQueueDo) FindInBatches(result *[]*model.SyncQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syncQueueDo) Attrs(attrs ...field.AssignExpr) *syncQueueDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syncQueueDo) Assign(attrs ...field.AssignExpr) *syncQueueDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syncQueueDo) Joins(fields ...field.RelationField) *syncQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syncQueueDo) Preload(fields ...field.RelationField) *syncQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syncQueueDo) FirstOrInit() (*model.SyncQueue, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncQueue), nil
	}
}

func (s syncQueueDo) FirstOrCreate() (*model.SyncQueue, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncQueue), nil
	}
}

func (s syncQueueDo) FindByPage(offset int, limit int) (result []*model.SyncQueue, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syncQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syncQueueDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syncQueueDo) Delete(models ...*model.SyncQueue) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syncQueueDo) withDO(do gen.Dao) *syncQueueDo {
	s.DO = *do.(*gen.DO)
	return s
}

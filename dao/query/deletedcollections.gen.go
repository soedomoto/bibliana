// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newDeletedCollection(db *gorm.DB, opts ...gen.DOOption) deletedCollection {
	_deletedCollection := deletedCollection{}

	_deletedCollection.deletedCollectionDo.UseDB(db, opts...)
	_deletedCollection.deletedCollectionDo.UseModel(&model.DeletedCollection{})

	tableName := _deletedCollection.deletedCollectionDo.TableName()
	_deletedCollection.ALL = field.NewAsterisk(tableName)
	_deletedCollection.CollectionID = field.NewInt32(tableName, "collectionID")
	_deletedCollection.DateDeleted = field.NewString(tableName, "dateDeleted")

	_deletedCollection.fillFieldMap()

	return _deletedCollection
}

type deletedCollection struct {
	deletedCollectionDo deletedCollectionDo

	ALL          field.Asterisk
	CollectionID field.Int32
	DateDeleted  field.String

	fieldMap map[string]field.Expr
}

func (d deletedCollection) Table(newTableName string) *deletedCollection {
	d.deletedCollectionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deletedCollection) As(alias string) *deletedCollection {
	d.deletedCollectionDo.DO = *(d.deletedCollectionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deletedCollection) updateTableName(table string) *deletedCollection {
	d.ALL = field.NewAsterisk(table)
	d.CollectionID = field.NewInt32(table, "collectionID")
	d.DateDeleted = field.NewString(table, "dateDeleted")

	d.fillFieldMap()

	return d
}

func (d *deletedCollection) WithContext(ctx context.Context) *deletedCollectionDo {
	return d.deletedCollectionDo.WithContext(ctx)
}

func (d deletedCollection) TableName() string { return d.deletedCollectionDo.TableName() }

func (d deletedCollection) Alias() string { return d.deletedCollectionDo.Alias() }

func (d deletedCollection) Columns(cols ...field.Expr) gen.Columns {
	return d.deletedCollectionDo.Columns(cols...)
}

func (d *deletedCollection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deletedCollection) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["collectionID"] = d.CollectionID
	d.fieldMap["dateDeleted"] = d.DateDeleted
}

func (d deletedCollection) clone(db *gorm.DB) deletedCollection {
	d.deletedCollectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deletedCollection) replaceDB(db *gorm.DB) deletedCollection {
	d.deletedCollectionDo.ReplaceDB(db)
	return d
}

type deletedCollectionDo struct{ gen.DO }

func (d deletedCollectionDo) Debug() *deletedCollectionDo {
	return d.withDO(d.DO.Debug())
}

func (d deletedCollectionDo) WithContext(ctx context.Context) *deletedCollectionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deletedCollectionDo) ReadDB() *deletedCollectionDo {
	return d.Clauses(dbresolver.Read)
}

func (d deletedCollectionDo) WriteDB() *deletedCollectionDo {
	return d.Clauses(dbresolver.Write)
}

func (d deletedCollectionDo) Session(config *gorm.Session) *deletedCollectionDo {
	return d.withDO(d.DO.Session(config))
}

func (d deletedCollectionDo) Clauses(conds ...clause.Expression) *deletedCollectionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deletedCollectionDo) Returning(value interface{}, columns ...string) *deletedCollectionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deletedCollectionDo) Not(conds ...gen.Condition) *deletedCollectionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deletedCollectionDo) Or(conds ...gen.Condition) *deletedCollectionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deletedCollectionDo) Select(conds ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deletedCollectionDo) Where(conds ...gen.Condition) *deletedCollectionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deletedCollectionDo) Order(conds ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deletedCollectionDo) Distinct(cols ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deletedCollectionDo) Omit(cols ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deletedCollectionDo) Join(table schema.Tabler, on ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deletedCollectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deletedCollectionDo) RightJoin(table schema.Tabler, on ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deletedCollectionDo) Group(cols ...field.Expr) *deletedCollectionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deletedCollectionDo) Having(conds ...gen.Condition) *deletedCollectionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deletedCollectionDo) Limit(limit int) *deletedCollectionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deletedCollectionDo) Offset(offset int) *deletedCollectionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deletedCollectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *deletedCollectionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deletedCollectionDo) Unscoped() *deletedCollectionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deletedCollectionDo) Create(values ...*model.DeletedCollection) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deletedCollectionDo) CreateInBatches(values []*model.DeletedCollection, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deletedCollectionDo) Save(values ...*model.DeletedCollection) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deletedCollectionDo) First() (*model.DeletedCollection, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedCollection), nil
	}
}

func (d deletedCollectionDo) Take() (*model.DeletedCollection, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedCollection), nil
	}
}

func (d deletedCollectionDo) Last() (*model.DeletedCollection, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedCollection), nil
	}
}

func (d deletedCollectionDo) Find() ([]*model.DeletedCollection, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeletedCollection), err
}

func (d deletedCollectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeletedCollection, err error) {
	buf := make([]*model.DeletedCollection, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deletedCollectionDo) FindInBatches(result *[]*model.DeletedCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deletedCollectionDo) Attrs(attrs ...field.AssignExpr) *deletedCollectionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deletedCollectionDo) Assign(attrs ...field.AssignExpr) *deletedCollectionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deletedCollectionDo) Joins(fields ...field.RelationField) *deletedCollectionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deletedCollectionDo) Preload(fields ...field.RelationField) *deletedCollectionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deletedCollectionDo) FirstOrInit() (*model.DeletedCollection, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedCollection), nil
	}
}

func (d deletedCollectionDo) FirstOrCreate() (*model.DeletedCollection, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedCollection), nil
	}
}

func (d deletedCollectionDo) FindByPage(offset int, limit int) (result []*model.DeletedCollection, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deletedCollectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deletedCollectionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deletedCollectionDo) Delete(models ...*model.DeletedCollection) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deletedCollectionDo) withDO(do gen.Dao) *deletedCollectionDo {
	d.DO = *do.(*gen.DO)
	return d
}

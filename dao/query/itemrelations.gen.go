// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newItemRelation(db *gorm.DB, opts ...gen.DOOption) itemRelation {
	_itemRelation := itemRelation{}

	_itemRelation.itemRelationDo.UseDB(db, opts...)
	_itemRelation.itemRelationDo.UseModel(&model.ItemRelation{})

	tableName := _itemRelation.itemRelationDo.TableName()
	_itemRelation.ALL = field.NewAsterisk(tableName)
	_itemRelation.ItemID = field.NewInt32(tableName, "itemID")
	_itemRelation.PredicateID = field.NewInt32(tableName, "predicateID")
	_itemRelation.Object = field.NewString(tableName, "object")

	_itemRelation.fillFieldMap()

	return _itemRelation
}

type itemRelation struct {
	itemRelationDo itemRelationDo

	ALL         field.Asterisk
	ItemID      field.Int32
	PredicateID field.Int32
	Object      field.String

	fieldMap map[string]field.Expr
}

func (i itemRelation) Table(newTableName string) *itemRelation {
	i.itemRelationDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemRelation) As(alias string) *itemRelation {
	i.itemRelationDo.DO = *(i.itemRelationDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemRelation) updateTableName(table string) *itemRelation {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewInt32(table, "itemID")
	i.PredicateID = field.NewInt32(table, "predicateID")
	i.Object = field.NewString(table, "object")

	i.fillFieldMap()

	return i
}

func (i *itemRelation) WithContext(ctx context.Context) *itemRelationDo {
	return i.itemRelationDo.WithContext(ctx)
}

func (i itemRelation) TableName() string { return i.itemRelationDo.TableName() }

func (i itemRelation) Alias() string { return i.itemRelationDo.Alias() }

func (i itemRelation) Columns(cols ...field.Expr) gen.Columns {
	return i.itemRelationDo.Columns(cols...)
}

func (i *itemRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemRelation) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 3)
	i.fieldMap["itemID"] = i.ItemID
	i.fieldMap["predicateID"] = i.PredicateID
	i.fieldMap["object"] = i.Object
}

func (i itemRelation) clone(db *gorm.DB) itemRelation {
	i.itemRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemRelation) replaceDB(db *gorm.DB) itemRelation {
	i.itemRelationDo.ReplaceDB(db)
	return i
}

type itemRelationDo struct{ gen.DO }

func (i itemRelationDo) Debug() *itemRelationDo {
	return i.withDO(i.DO.Debug())
}

func (i itemRelationDo) WithContext(ctx context.Context) *itemRelationDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemRelationDo) ReadDB() *itemRelationDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemRelationDo) WriteDB() *itemRelationDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemRelationDo) Session(config *gorm.Session) *itemRelationDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemRelationDo) Clauses(conds ...clause.Expression) *itemRelationDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemRelationDo) Returning(value interface{}, columns ...string) *itemRelationDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemRelationDo) Not(conds ...gen.Condition) *itemRelationDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemRelationDo) Or(conds ...gen.Condition) *itemRelationDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemRelationDo) Select(conds ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemRelationDo) Where(conds ...gen.Condition) *itemRelationDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemRelationDo) Order(conds ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemRelationDo) Distinct(cols ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemRelationDo) Omit(cols ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemRelationDo) Join(table schema.Tabler, on ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemRelationDo) Group(cols ...field.Expr) *itemRelationDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemRelationDo) Having(conds ...gen.Condition) *itemRelationDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemRelationDo) Limit(limit int) *itemRelationDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemRelationDo) Offset(offset int) *itemRelationDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemRelationDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemRelationDo) Unscoped() *itemRelationDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemRelationDo) Create(values ...*model.ItemRelation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemRelationDo) CreateInBatches(values []*model.ItemRelation, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemRelationDo) Save(values ...*model.ItemRelation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemRelationDo) First() (*model.ItemRelation, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemRelation), nil
	}
}

func (i itemRelationDo) Take() (*model.ItemRelation, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemRelation), nil
	}
}

func (i itemRelationDo) Last() (*model.ItemRelation, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemRelation), nil
	}
}

func (i itemRelationDo) Find() ([]*model.ItemRelation, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemRelation), err
}

func (i itemRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemRelation, err error) {
	buf := make([]*model.ItemRelation, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemRelationDo) FindInBatches(result *[]*model.ItemRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemRelationDo) Attrs(attrs ...field.AssignExpr) *itemRelationDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemRelationDo) Assign(attrs ...field.AssignExpr) *itemRelationDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemRelationDo) Joins(fields ...field.RelationField) *itemRelationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemRelationDo) Preload(fields ...field.RelationField) *itemRelationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemRelationDo) FirstOrInit() (*model.ItemRelation, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemRelation), nil
	}
}

func (i itemRelationDo) FirstOrCreate() (*model.ItemRelation, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemRelation), nil
	}
}

func (i itemRelationDo) FindByPage(offset int, limit int) (result []*model.ItemRelation, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemRelationDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemRelationDo) Delete(models ...*model.ItemRelation) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemRelationDo) withDO(do gen.Dao) *itemRelationDo {
	i.DO = *do.(*gen.DO)
	return i
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newSyncDeleteLog(db *gorm.DB, opts ...gen.DOOption) syncDeleteLog {
	_syncDeleteLog := syncDeleteLog{}

	_syncDeleteLog.syncDeleteLogDo.UseDB(db, opts...)
	_syncDeleteLog.syncDeleteLogDo.UseModel(&model.SyncDeleteLog{})

	tableName := _syncDeleteLog.syncDeleteLogDo.TableName()
	_syncDeleteLog.ALL = field.NewAsterisk(tableName)
	_syncDeleteLog.SyncObjectTypeID = field.NewInt32(tableName, "syncObjectTypeID")
	_syncDeleteLog.LibraryID = field.NewInt32(tableName, "libraryID")
	_syncDeleteLog.Key = field.NewString(tableName, "key")
	_syncDeleteLog.DateDeleted = field.NewString(tableName, "dateDeleted")

	_syncDeleteLog.fillFieldMap()

	return _syncDeleteLog
}

type syncDeleteLog struct {
	syncDeleteLogDo syncDeleteLogDo

	ALL              field.Asterisk
	SyncObjectTypeID field.Int32
	LibraryID        field.Int32
	Key              field.String
	DateDeleted      field.String

	fieldMap map[string]field.Expr
}

func (s syncDeleteLog) Table(newTableName string) *syncDeleteLog {
	s.syncDeleteLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syncDeleteLog) As(alias string) *syncDeleteLog {
	s.syncDeleteLogDo.DO = *(s.syncDeleteLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syncDeleteLog) updateTableName(table string) *syncDeleteLog {
	s.ALL = field.NewAsterisk(table)
	s.SyncObjectTypeID = field.NewInt32(table, "syncObjectTypeID")
	s.LibraryID = field.NewInt32(table, "libraryID")
	s.Key = field.NewString(table, "key")
	s.DateDeleted = field.NewString(table, "dateDeleted")

	s.fillFieldMap()

	return s
}

func (s *syncDeleteLog) WithContext(ctx context.Context) *syncDeleteLogDo {
	return s.syncDeleteLogDo.WithContext(ctx)
}

func (s syncDeleteLog) TableName() string { return s.syncDeleteLogDo.TableName() }

func (s syncDeleteLog) Alias() string { return s.syncDeleteLogDo.Alias() }

func (s syncDeleteLog) Columns(cols ...field.Expr) gen.Columns {
	return s.syncDeleteLogDo.Columns(cols...)
}

func (s *syncDeleteLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syncDeleteLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["syncObjectTypeID"] = s.SyncObjectTypeID
	s.fieldMap["libraryID"] = s.LibraryID
	s.fieldMap["key"] = s.Key
	s.fieldMap["dateDeleted"] = s.DateDeleted
}

func (s syncDeleteLog) clone(db *gorm.DB) syncDeleteLog {
	s.syncDeleteLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syncDeleteLog) replaceDB(db *gorm.DB) syncDeleteLog {
	s.syncDeleteLogDo.ReplaceDB(db)
	return s
}

type syncDeleteLogDo struct{ gen.DO }

func (s syncDeleteLogDo) Debug() *syncDeleteLogDo {
	return s.withDO(s.DO.Debug())
}

func (s syncDeleteLogDo) WithContext(ctx context.Context) *syncDeleteLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syncDeleteLogDo) ReadDB() *syncDeleteLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s syncDeleteLogDo) WriteDB() *syncDeleteLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s syncDeleteLogDo) Session(config *gorm.Session) *syncDeleteLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s syncDeleteLogDo) Clauses(conds ...clause.Expression) *syncDeleteLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syncDeleteLogDo) Returning(value interface{}, columns ...string) *syncDeleteLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syncDeleteLogDo) Not(conds ...gen.Condition) *syncDeleteLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syncDeleteLogDo) Or(conds ...gen.Condition) *syncDeleteLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syncDeleteLogDo) Select(conds ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syncDeleteLogDo) Where(conds ...gen.Condition) *syncDeleteLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syncDeleteLogDo) Order(conds ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syncDeleteLogDo) Distinct(cols ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syncDeleteLogDo) Omit(cols ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syncDeleteLogDo) Join(table schema.Tabler, on ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syncDeleteLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syncDeleteLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syncDeleteLogDo) Group(cols ...field.Expr) *syncDeleteLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syncDeleteLogDo) Having(conds ...gen.Condition) *syncDeleteLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syncDeleteLogDo) Limit(limit int) *syncDeleteLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syncDeleteLogDo) Offset(offset int) *syncDeleteLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syncDeleteLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *syncDeleteLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syncDeleteLogDo) Unscoped() *syncDeleteLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syncDeleteLogDo) Create(values ...*model.SyncDeleteLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syncDeleteLogDo) CreateInBatches(values []*model.SyncDeleteLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syncDeleteLogDo) Save(values ...*model.SyncDeleteLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syncDeleteLogDo) First() (*model.SyncDeleteLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncDeleteLog), nil
	}
}

func (s syncDeleteLogDo) Take() (*model.SyncDeleteLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncDeleteLog), nil
	}
}

func (s syncDeleteLogDo) Last() (*model.SyncDeleteLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncDeleteLog), nil
	}
}

func (s syncDeleteLogDo) Find() ([]*model.SyncDeleteLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyncDeleteLog), err
}

func (s syncDeleteLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncDeleteLog, err error) {
	buf := make([]*model.SyncDeleteLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syncDeleteLogDo) FindInBatches(result *[]*model.SyncDeleteLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syncDeleteLogDo) Attrs(attrs ...field.AssignExpr) *syncDeleteLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syncDeleteLogDo) Assign(attrs ...field.AssignExpr) *syncDeleteLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syncDeleteLogDo) Joins(fields ...field.RelationField) *syncDeleteLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syncDeleteLogDo) Preload(fields ...field.RelationField) *syncDeleteLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syncDeleteLogDo) FirstOrInit() (*model.SyncDeleteLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncDeleteLog), nil
	}
}

func (s syncDeleteLogDo) FirstOrCreate() (*model.SyncDeleteLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncDeleteLog), nil
	}
}

func (s syncDeleteLogDo) FindByPage(offset int, limit int) (result []*model.SyncDeleteLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syncDeleteLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syncDeleteLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syncDeleteLogDo) Delete(models ...*model.SyncDeleteLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syncDeleteLogDo) withDO(do gen.Dao) *syncDeleteLogDo {
	s.DO = *do.(*gen.DO)
	return s
}

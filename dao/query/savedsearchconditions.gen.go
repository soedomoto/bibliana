// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newSavedSearchCondition(db *gorm.DB, opts ...gen.DOOption) savedSearchCondition {
	_savedSearchCondition := savedSearchCondition{}

	_savedSearchCondition.savedSearchConditionDo.UseDB(db, opts...)
	_savedSearchCondition.savedSearchConditionDo.UseModel(&model.SavedSearchCondition{})

	tableName := _savedSearchCondition.savedSearchConditionDo.TableName()
	_savedSearchCondition.ALL = field.NewAsterisk(tableName)
	_savedSearchCondition.SavedSearchID = field.NewInt32(tableName, "savedSearchID")
	_savedSearchCondition.SearchConditionID = field.NewInt32(tableName, "searchConditionID")
	_savedSearchCondition.Condition = field.NewString(tableName, "condition")
	_savedSearchCondition.Operator = field.NewString(tableName, "operator")
	_savedSearchCondition.Value = field.NewString(tableName, "value")
	_savedSearchCondition.Required = field.NewString(tableName, "required")

	_savedSearchCondition.fillFieldMap()

	return _savedSearchCondition
}

type savedSearchCondition struct {
	savedSearchConditionDo savedSearchConditionDo

	ALL               field.Asterisk
	SavedSearchID     field.Int32
	SearchConditionID field.Int32
	Condition         field.String
	Operator          field.String
	Value             field.String
	Required          field.String

	fieldMap map[string]field.Expr
}

func (s savedSearchCondition) Table(newTableName string) *savedSearchCondition {
	s.savedSearchConditionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s savedSearchCondition) As(alias string) *savedSearchCondition {
	s.savedSearchConditionDo.DO = *(s.savedSearchConditionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *savedSearchCondition) updateTableName(table string) *savedSearchCondition {
	s.ALL = field.NewAsterisk(table)
	s.SavedSearchID = field.NewInt32(table, "savedSearchID")
	s.SearchConditionID = field.NewInt32(table, "searchConditionID")
	s.Condition = field.NewString(table, "condition")
	s.Operator = field.NewString(table, "operator")
	s.Value = field.NewString(table, "value")
	s.Required = field.NewString(table, "required")

	s.fillFieldMap()

	return s
}

func (s *savedSearchCondition) WithContext(ctx context.Context) *savedSearchConditionDo {
	return s.savedSearchConditionDo.WithContext(ctx)
}

func (s savedSearchCondition) TableName() string { return s.savedSearchConditionDo.TableName() }

func (s savedSearchCondition) Alias() string { return s.savedSearchConditionDo.Alias() }

func (s savedSearchCondition) Columns(cols ...field.Expr) gen.Columns {
	return s.savedSearchConditionDo.Columns(cols...)
}

func (s *savedSearchCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *savedSearchCondition) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["savedSearchID"] = s.SavedSearchID
	s.fieldMap["searchConditionID"] = s.SearchConditionID
	s.fieldMap["condition"] = s.Condition
	s.fieldMap["operator"] = s.Operator
	s.fieldMap["value"] = s.Value
	s.fieldMap["required"] = s.Required
}

func (s savedSearchCondition) clone(db *gorm.DB) savedSearchCondition {
	s.savedSearchConditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s savedSearchCondition) replaceDB(db *gorm.DB) savedSearchCondition {
	s.savedSearchConditionDo.ReplaceDB(db)
	return s
}

type savedSearchConditionDo struct{ gen.DO }

func (s savedSearchConditionDo) Debug() *savedSearchConditionDo {
	return s.withDO(s.DO.Debug())
}

func (s savedSearchConditionDo) WithContext(ctx context.Context) *savedSearchConditionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s savedSearchConditionDo) ReadDB() *savedSearchConditionDo {
	return s.Clauses(dbresolver.Read)
}

func (s savedSearchConditionDo) WriteDB() *savedSearchConditionDo {
	return s.Clauses(dbresolver.Write)
}

func (s savedSearchConditionDo) Session(config *gorm.Session) *savedSearchConditionDo {
	return s.withDO(s.DO.Session(config))
}

func (s savedSearchConditionDo) Clauses(conds ...clause.Expression) *savedSearchConditionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s savedSearchConditionDo) Returning(value interface{}, columns ...string) *savedSearchConditionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s savedSearchConditionDo) Not(conds ...gen.Condition) *savedSearchConditionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s savedSearchConditionDo) Or(conds ...gen.Condition) *savedSearchConditionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s savedSearchConditionDo) Select(conds ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s savedSearchConditionDo) Where(conds ...gen.Condition) *savedSearchConditionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s savedSearchConditionDo) Order(conds ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s savedSearchConditionDo) Distinct(cols ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s savedSearchConditionDo) Omit(cols ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s savedSearchConditionDo) Join(table schema.Tabler, on ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s savedSearchConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s savedSearchConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s savedSearchConditionDo) Group(cols ...field.Expr) *savedSearchConditionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s savedSearchConditionDo) Having(conds ...gen.Condition) *savedSearchConditionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s savedSearchConditionDo) Limit(limit int) *savedSearchConditionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s savedSearchConditionDo) Offset(offset int) *savedSearchConditionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s savedSearchConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *savedSearchConditionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s savedSearchConditionDo) Unscoped() *savedSearchConditionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s savedSearchConditionDo) Create(values ...*model.SavedSearchCondition) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s savedSearchConditionDo) CreateInBatches(values []*model.SavedSearchCondition, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s savedSearchConditionDo) Save(values ...*model.SavedSearchCondition) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s savedSearchConditionDo) First() (*model.SavedSearchCondition, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SavedSearchCondition), nil
	}
}

func (s savedSearchConditionDo) Take() (*model.SavedSearchCondition, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SavedSearchCondition), nil
	}
}

func (s savedSearchConditionDo) Last() (*model.SavedSearchCondition, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SavedSearchCondition), nil
	}
}

func (s savedSearchConditionDo) Find() ([]*model.SavedSearchCondition, error) {
	result, err := s.DO.Find()
	return result.([]*model.SavedSearchCondition), err
}

func (s savedSearchConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SavedSearchCondition, err error) {
	buf := make([]*model.SavedSearchCondition, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s savedSearchConditionDo) FindInBatches(result *[]*model.SavedSearchCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s savedSearchConditionDo) Attrs(attrs ...field.AssignExpr) *savedSearchConditionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s savedSearchConditionDo) Assign(attrs ...field.AssignExpr) *savedSearchConditionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s savedSearchConditionDo) Joins(fields ...field.RelationField) *savedSearchConditionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s savedSearchConditionDo) Preload(fields ...field.RelationField) *savedSearchConditionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s savedSearchConditionDo) FirstOrInit() (*model.SavedSearchCondition, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SavedSearchCondition), nil
	}
}

func (s savedSearchConditionDo) FirstOrCreate() (*model.SavedSearchCondition, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SavedSearchCondition), nil
	}
}

func (s savedSearchConditionDo) FindByPage(offset int, limit int) (result []*model.SavedSearchCondition, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s savedSearchConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s savedSearchConditionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s savedSearchConditionDo) Delete(models ...*model.SavedSearchCondition) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *savedSearchConditionDo) withDO(do gen.Dao) *savedSearchConditionDo {
	s.DO = *do.(*gen.DO)
	return s
}

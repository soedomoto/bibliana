// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newCreatorType(db *gorm.DB, opts ...gen.DOOption) creatorType {
	_creatorType := creatorType{}

	_creatorType.creatorTypeDo.UseDB(db, opts...)
	_creatorType.creatorTypeDo.UseModel(&model.CreatorType{})

	tableName := _creatorType.creatorTypeDo.TableName()
	_creatorType.ALL = field.NewAsterisk(tableName)
	_creatorType.CreatorTypeID = field.NewInt32(tableName, "creatorTypeID")
	_creatorType.CreatorType = field.NewString(tableName, "creatorType")

	_creatorType.fillFieldMap()

	return _creatorType
}

type creatorType struct {
	creatorTypeDo creatorTypeDo

	ALL           field.Asterisk
	CreatorTypeID field.Int32
	CreatorType   field.String

	fieldMap map[string]field.Expr
}

func (c creatorType) Table(newTableName string) *creatorType {
	c.creatorTypeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c creatorType) As(alias string) *creatorType {
	c.creatorTypeDo.DO = *(c.creatorTypeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *creatorType) updateTableName(table string) *creatorType {
	c.ALL = field.NewAsterisk(table)
	c.CreatorTypeID = field.NewInt32(table, "creatorTypeID")
	c.CreatorType = field.NewString(table, "creatorType")

	c.fillFieldMap()

	return c
}

func (c *creatorType) WithContext(ctx context.Context) *creatorTypeDo {
	return c.creatorTypeDo.WithContext(ctx)
}

func (c creatorType) TableName() string { return c.creatorTypeDo.TableName() }

func (c creatorType) Alias() string { return c.creatorTypeDo.Alias() }

func (c creatorType) Columns(cols ...field.Expr) gen.Columns { return c.creatorTypeDo.Columns(cols...) }

func (c *creatorType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *creatorType) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["creatorTypeID"] = c.CreatorTypeID
	c.fieldMap["creatorType"] = c.CreatorType
}

func (c creatorType) clone(db *gorm.DB) creatorType {
	c.creatorTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c creatorType) replaceDB(db *gorm.DB) creatorType {
	c.creatorTypeDo.ReplaceDB(db)
	return c
}

type creatorTypeDo struct{ gen.DO }

func (c creatorTypeDo) Debug() *creatorTypeDo {
	return c.withDO(c.DO.Debug())
}

func (c creatorTypeDo) WithContext(ctx context.Context) *creatorTypeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c creatorTypeDo) ReadDB() *creatorTypeDo {
	return c.Clauses(dbresolver.Read)
}

func (c creatorTypeDo) WriteDB() *creatorTypeDo {
	return c.Clauses(dbresolver.Write)
}

func (c creatorTypeDo) Session(config *gorm.Session) *creatorTypeDo {
	return c.withDO(c.DO.Session(config))
}

func (c creatorTypeDo) Clauses(conds ...clause.Expression) *creatorTypeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c creatorTypeDo) Returning(value interface{}, columns ...string) *creatorTypeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c creatorTypeDo) Not(conds ...gen.Condition) *creatorTypeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c creatorTypeDo) Or(conds ...gen.Condition) *creatorTypeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c creatorTypeDo) Select(conds ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c creatorTypeDo) Where(conds ...gen.Condition) *creatorTypeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c creatorTypeDo) Order(conds ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c creatorTypeDo) Distinct(cols ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c creatorTypeDo) Omit(cols ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c creatorTypeDo) Join(table schema.Tabler, on ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c creatorTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c creatorTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c creatorTypeDo) Group(cols ...field.Expr) *creatorTypeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c creatorTypeDo) Having(conds ...gen.Condition) *creatorTypeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c creatorTypeDo) Limit(limit int) *creatorTypeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c creatorTypeDo) Offset(offset int) *creatorTypeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c creatorTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *creatorTypeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c creatorTypeDo) Unscoped() *creatorTypeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c creatorTypeDo) Create(values ...*model.CreatorType) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c creatorTypeDo) CreateInBatches(values []*model.CreatorType, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c creatorTypeDo) Save(values ...*model.CreatorType) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c creatorTypeDo) First() (*model.CreatorType, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreatorType), nil
	}
}

func (c creatorTypeDo) Take() (*model.CreatorType, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreatorType), nil
	}
}

func (c creatorTypeDo) Last() (*model.CreatorType, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreatorType), nil
	}
}

func (c creatorTypeDo) Find() ([]*model.CreatorType, error) {
	result, err := c.DO.Find()
	return result.([]*model.CreatorType), err
}

func (c creatorTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CreatorType, err error) {
	buf := make([]*model.CreatorType, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c creatorTypeDo) FindInBatches(result *[]*model.CreatorType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c creatorTypeDo) Attrs(attrs ...field.AssignExpr) *creatorTypeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c creatorTypeDo) Assign(attrs ...field.AssignExpr) *creatorTypeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c creatorTypeDo) Joins(fields ...field.RelationField) *creatorTypeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c creatorTypeDo) Preload(fields ...field.RelationField) *creatorTypeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c creatorTypeDo) FirstOrInit() (*model.CreatorType, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreatorType), nil
	}
}

func (c creatorTypeDo) FirstOrCreate() (*model.CreatorType, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreatorType), nil
	}
}

func (c creatorTypeDo) FindByPage(offset int, limit int) (result []*model.CreatorType, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c creatorTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c creatorTypeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c creatorTypeDo) Delete(models ...*model.CreatorType) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *creatorTypeDo) withDO(do gen.Dao) *creatorTypeDo {
	c.DO = *do.(*gen.DO)
	return c
}

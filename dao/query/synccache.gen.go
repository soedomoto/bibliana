// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newSyncCache(db *gorm.DB, opts ...gen.DOOption) syncCache {
	_syncCache := syncCache{}

	_syncCache.syncCacheDo.UseDB(db, opts...)
	_syncCache.syncCacheDo.UseModel(&model.SyncCache{})

	tableName := _syncCache.syncCacheDo.TableName()
	_syncCache.ALL = field.NewAsterisk(tableName)
	_syncCache.LibraryID = field.NewInt32(tableName, "libraryID")
	_syncCache.Key = field.NewString(tableName, "key")
	_syncCache.SyncObjectTypeID = field.NewInt32(tableName, "syncObjectTypeID")
	_syncCache.Version = field.NewInt32(tableName, "version")
	_syncCache.Data = field.NewString(tableName, "data")

	_syncCache.fillFieldMap()

	return _syncCache
}

type syncCache struct {
	syncCacheDo syncCacheDo

	ALL              field.Asterisk
	LibraryID        field.Int32
	Key              field.String
	SyncObjectTypeID field.Int32
	Version          field.Int32
	Data             field.String

	fieldMap map[string]field.Expr
}

func (s syncCache) Table(newTableName string) *syncCache {
	s.syncCacheDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syncCache) As(alias string) *syncCache {
	s.syncCacheDo.DO = *(s.syncCacheDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syncCache) updateTableName(table string) *syncCache {
	s.ALL = field.NewAsterisk(table)
	s.LibraryID = field.NewInt32(table, "libraryID")
	s.Key = field.NewString(table, "key")
	s.SyncObjectTypeID = field.NewInt32(table, "syncObjectTypeID")
	s.Version = field.NewInt32(table, "version")
	s.Data = field.NewString(table, "data")

	s.fillFieldMap()

	return s
}

func (s *syncCache) WithContext(ctx context.Context) *syncCacheDo {
	return s.syncCacheDo.WithContext(ctx)
}

func (s syncCache) TableName() string { return s.syncCacheDo.TableName() }

func (s syncCache) Alias() string { return s.syncCacheDo.Alias() }

func (s syncCache) Columns(cols ...field.Expr) gen.Columns { return s.syncCacheDo.Columns(cols...) }

func (s *syncCache) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syncCache) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["libraryID"] = s.LibraryID
	s.fieldMap["key"] = s.Key
	s.fieldMap["syncObjectTypeID"] = s.SyncObjectTypeID
	s.fieldMap["version"] = s.Version
	s.fieldMap["data"] = s.Data
}

func (s syncCache) clone(db *gorm.DB) syncCache {
	s.syncCacheDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syncCache) replaceDB(db *gorm.DB) syncCache {
	s.syncCacheDo.ReplaceDB(db)
	return s
}

type syncCacheDo struct{ gen.DO }

func (s syncCacheDo) Debug() *syncCacheDo {
	return s.withDO(s.DO.Debug())
}

func (s syncCacheDo) WithContext(ctx context.Context) *syncCacheDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syncCacheDo) ReadDB() *syncCacheDo {
	return s.Clauses(dbresolver.Read)
}

func (s syncCacheDo) WriteDB() *syncCacheDo {
	return s.Clauses(dbresolver.Write)
}

func (s syncCacheDo) Session(config *gorm.Session) *syncCacheDo {
	return s.withDO(s.DO.Session(config))
}

func (s syncCacheDo) Clauses(conds ...clause.Expression) *syncCacheDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syncCacheDo) Returning(value interface{}, columns ...string) *syncCacheDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syncCacheDo) Not(conds ...gen.Condition) *syncCacheDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syncCacheDo) Or(conds ...gen.Condition) *syncCacheDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syncCacheDo) Select(conds ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syncCacheDo) Where(conds ...gen.Condition) *syncCacheDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syncCacheDo) Order(conds ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syncCacheDo) Distinct(cols ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syncCacheDo) Omit(cols ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syncCacheDo) Join(table schema.Tabler, on ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syncCacheDo) LeftJoin(table schema.Tabler, on ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syncCacheDo) RightJoin(table schema.Tabler, on ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syncCacheDo) Group(cols ...field.Expr) *syncCacheDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syncCacheDo) Having(conds ...gen.Condition) *syncCacheDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syncCacheDo) Limit(limit int) *syncCacheDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syncCacheDo) Offset(offset int) *syncCacheDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syncCacheDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *syncCacheDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syncCacheDo) Unscoped() *syncCacheDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syncCacheDo) Create(values ...*model.SyncCache) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syncCacheDo) CreateInBatches(values []*model.SyncCache, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syncCacheDo) Save(values ...*model.SyncCache) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syncCacheDo) First() (*model.SyncCache, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncCache), nil
	}
}

func (s syncCacheDo) Take() (*model.SyncCache, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncCache), nil
	}
}

func (s syncCacheDo) Last() (*model.SyncCache, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncCache), nil
	}
}

func (s syncCacheDo) Find() ([]*model.SyncCache, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyncCache), err
}

func (s syncCacheDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncCache, err error) {
	buf := make([]*model.SyncCache, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syncCacheDo) FindInBatches(result *[]*model.SyncCache, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syncCacheDo) Attrs(attrs ...field.AssignExpr) *syncCacheDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syncCacheDo) Assign(attrs ...field.AssignExpr) *syncCacheDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syncCacheDo) Joins(fields ...field.RelationField) *syncCacheDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syncCacheDo) Preload(fields ...field.RelationField) *syncCacheDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syncCacheDo) FirstOrInit() (*model.SyncCache, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncCache), nil
	}
}

func (s syncCacheDo) FirstOrCreate() (*model.SyncCache, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncCache), nil
	}
}

func (s syncCacheDo) FindByPage(offset int, limit int) (result []*model.SyncCache, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syncCacheDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syncCacheDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syncCacheDo) Delete(models ...*model.SyncCache) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syncCacheDo) withDO(do gen.Dao) *syncCacheDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newItemCreator(db *gorm.DB, opts ...gen.DOOption) itemCreator {
	_itemCreator := itemCreator{}

	_itemCreator.itemCreatorDo.UseDB(db, opts...)
	_itemCreator.itemCreatorDo.UseModel(&model.ItemCreator{})

	tableName := _itemCreator.itemCreatorDo.TableName()
	_itemCreator.ALL = field.NewAsterisk(tableName)
	_itemCreator.ItemID = field.NewInt32(tableName, "itemID")
	_itemCreator.CreatorID = field.NewInt32(tableName, "creatorID")
	_itemCreator.CreatorTypeID = field.NewInt32(tableName, "creatorTypeID")
	_itemCreator.OrderIndex = field.NewInt32(tableName, "orderIndex")

	_itemCreator.fillFieldMap()

	return _itemCreator
}

type itemCreator struct {
	itemCreatorDo itemCreatorDo

	ALL           field.Asterisk
	ItemID        field.Int32
	CreatorID     field.Int32
	CreatorTypeID field.Int32
	OrderIndex    field.Int32

	fieldMap map[string]field.Expr
}

func (i itemCreator) Table(newTableName string) *itemCreator {
	i.itemCreatorDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemCreator) As(alias string) *itemCreator {
	i.itemCreatorDo.DO = *(i.itemCreatorDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemCreator) updateTableName(table string) *itemCreator {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewInt32(table, "itemID")
	i.CreatorID = field.NewInt32(table, "creatorID")
	i.CreatorTypeID = field.NewInt32(table, "creatorTypeID")
	i.OrderIndex = field.NewInt32(table, "orderIndex")

	i.fillFieldMap()

	return i
}

func (i *itemCreator) WithContext(ctx context.Context) *itemCreatorDo {
	return i.itemCreatorDo.WithContext(ctx)
}

func (i itemCreator) TableName() string { return i.itemCreatorDo.TableName() }

func (i itemCreator) Alias() string { return i.itemCreatorDo.Alias() }

func (i itemCreator) Columns(cols ...field.Expr) gen.Columns { return i.itemCreatorDo.Columns(cols...) }

func (i *itemCreator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemCreator) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["itemID"] = i.ItemID
	i.fieldMap["creatorID"] = i.CreatorID
	i.fieldMap["creatorTypeID"] = i.CreatorTypeID
	i.fieldMap["orderIndex"] = i.OrderIndex
}

func (i itemCreator) clone(db *gorm.DB) itemCreator {
	i.itemCreatorDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemCreator) replaceDB(db *gorm.DB) itemCreator {
	i.itemCreatorDo.ReplaceDB(db)
	return i
}

type itemCreatorDo struct{ gen.DO }

func (i itemCreatorDo) Debug() *itemCreatorDo {
	return i.withDO(i.DO.Debug())
}

func (i itemCreatorDo) WithContext(ctx context.Context) *itemCreatorDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemCreatorDo) ReadDB() *itemCreatorDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemCreatorDo) WriteDB() *itemCreatorDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemCreatorDo) Session(config *gorm.Session) *itemCreatorDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemCreatorDo) Clauses(conds ...clause.Expression) *itemCreatorDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemCreatorDo) Returning(value interface{}, columns ...string) *itemCreatorDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemCreatorDo) Not(conds ...gen.Condition) *itemCreatorDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemCreatorDo) Or(conds ...gen.Condition) *itemCreatorDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemCreatorDo) Select(conds ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemCreatorDo) Where(conds ...gen.Condition) *itemCreatorDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemCreatorDo) Order(conds ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemCreatorDo) Distinct(cols ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemCreatorDo) Omit(cols ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemCreatorDo) Join(table schema.Tabler, on ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemCreatorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemCreatorDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemCreatorDo) Group(cols ...field.Expr) *itemCreatorDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemCreatorDo) Having(conds ...gen.Condition) *itemCreatorDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemCreatorDo) Limit(limit int) *itemCreatorDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemCreatorDo) Offset(offset int) *itemCreatorDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemCreatorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemCreatorDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemCreatorDo) Unscoped() *itemCreatorDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemCreatorDo) Create(values ...*model.ItemCreator) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemCreatorDo) CreateInBatches(values []*model.ItemCreator, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemCreatorDo) Save(values ...*model.ItemCreator) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemCreatorDo) First() (*model.ItemCreator, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCreator), nil
	}
}

func (i itemCreatorDo) Take() (*model.ItemCreator, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCreator), nil
	}
}

func (i itemCreatorDo) Last() (*model.ItemCreator, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCreator), nil
	}
}

func (i itemCreatorDo) Find() ([]*model.ItemCreator, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemCreator), err
}

func (i itemCreatorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemCreator, err error) {
	buf := make([]*model.ItemCreator, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemCreatorDo) FindInBatches(result *[]*model.ItemCreator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemCreatorDo) Attrs(attrs ...field.AssignExpr) *itemCreatorDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemCreatorDo) Assign(attrs ...field.AssignExpr) *itemCreatorDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemCreatorDo) Joins(fields ...field.RelationField) *itemCreatorDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemCreatorDo) Preload(fields ...field.RelationField) *itemCreatorDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemCreatorDo) FirstOrInit() (*model.ItemCreator, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCreator), nil
	}
}

func (i itemCreatorDo) FirstOrCreate() (*model.ItemCreator, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCreator), nil
	}
}

func (i itemCreatorDo) FindByPage(offset int, limit int) (result []*model.ItemCreator, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemCreatorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemCreatorDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemCreatorDo) Delete(models ...*model.ItemCreator) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemCreatorDo) withDO(do gen.Dao) *itemCreatorDo {
	i.DO = *do.(*gen.DO)
	return i
}

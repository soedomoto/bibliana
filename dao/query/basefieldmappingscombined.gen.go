// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newBaseFieldMappingsCombined(db *gorm.DB, opts ...gen.DOOption) baseFieldMappingsCombined {
	_baseFieldMappingsCombined := baseFieldMappingsCombined{}

	_baseFieldMappingsCombined.baseFieldMappingsCombinedDo.UseDB(db, opts...)
	_baseFieldMappingsCombined.baseFieldMappingsCombinedDo.UseModel(&model.BaseFieldMappingsCombined{})

	tableName := _baseFieldMappingsCombined.baseFieldMappingsCombinedDo.TableName()
	_baseFieldMappingsCombined.ALL = field.NewAsterisk(tableName)
	_baseFieldMappingsCombined.ItemTypeID = field.NewInt32(tableName, "itemTypeID")
	_baseFieldMappingsCombined.BaseFieldID = field.NewInt32(tableName, "baseFieldID")
	_baseFieldMappingsCombined.FieldID = field.NewInt32(tableName, "fieldID")

	_baseFieldMappingsCombined.fillFieldMap()

	return _baseFieldMappingsCombined
}

type baseFieldMappingsCombined struct {
	baseFieldMappingsCombinedDo baseFieldMappingsCombinedDo

	ALL         field.Asterisk
	ItemTypeID  field.Int32
	BaseFieldID field.Int32
	FieldID     field.Int32

	fieldMap map[string]field.Expr
}

func (b baseFieldMappingsCombined) Table(newTableName string) *baseFieldMappingsCombined {
	b.baseFieldMappingsCombinedDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b baseFieldMappingsCombined) As(alias string) *baseFieldMappingsCombined {
	b.baseFieldMappingsCombinedDo.DO = *(b.baseFieldMappingsCombinedDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *baseFieldMappingsCombined) updateTableName(table string) *baseFieldMappingsCombined {
	b.ALL = field.NewAsterisk(table)
	b.ItemTypeID = field.NewInt32(table, "itemTypeID")
	b.BaseFieldID = field.NewInt32(table, "baseFieldID")
	b.FieldID = field.NewInt32(table, "fieldID")

	b.fillFieldMap()

	return b
}

func (b *baseFieldMappingsCombined) WithContext(ctx context.Context) *baseFieldMappingsCombinedDo {
	return b.baseFieldMappingsCombinedDo.WithContext(ctx)
}

func (b baseFieldMappingsCombined) TableName() string {
	return b.baseFieldMappingsCombinedDo.TableName()
}

func (b baseFieldMappingsCombined) Alias() string { return b.baseFieldMappingsCombinedDo.Alias() }

func (b baseFieldMappingsCombined) Columns(cols ...field.Expr) gen.Columns {
	return b.baseFieldMappingsCombinedDo.Columns(cols...)
}

func (b *baseFieldMappingsCombined) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *baseFieldMappingsCombined) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["itemTypeID"] = b.ItemTypeID
	b.fieldMap["baseFieldID"] = b.BaseFieldID
	b.fieldMap["fieldID"] = b.FieldID
}

func (b baseFieldMappingsCombined) clone(db *gorm.DB) baseFieldMappingsCombined {
	b.baseFieldMappingsCombinedDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b baseFieldMappingsCombined) replaceDB(db *gorm.DB) baseFieldMappingsCombined {
	b.baseFieldMappingsCombinedDo.ReplaceDB(db)
	return b
}

type baseFieldMappingsCombinedDo struct{ gen.DO }

func (b baseFieldMappingsCombinedDo) Debug() *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Debug())
}

func (b baseFieldMappingsCombinedDo) WithContext(ctx context.Context) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b baseFieldMappingsCombinedDo) ReadDB() *baseFieldMappingsCombinedDo {
	return b.Clauses(dbresolver.Read)
}

func (b baseFieldMappingsCombinedDo) WriteDB() *baseFieldMappingsCombinedDo {
	return b.Clauses(dbresolver.Write)
}

func (b baseFieldMappingsCombinedDo) Session(config *gorm.Session) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Session(config))
}

func (b baseFieldMappingsCombinedDo) Clauses(conds ...clause.Expression) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b baseFieldMappingsCombinedDo) Returning(value interface{}, columns ...string) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b baseFieldMappingsCombinedDo) Not(conds ...gen.Condition) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b baseFieldMappingsCombinedDo) Or(conds ...gen.Condition) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b baseFieldMappingsCombinedDo) Select(conds ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b baseFieldMappingsCombinedDo) Where(conds ...gen.Condition) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b baseFieldMappingsCombinedDo) Order(conds ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b baseFieldMappingsCombinedDo) Distinct(cols ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b baseFieldMappingsCombinedDo) Omit(cols ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b baseFieldMappingsCombinedDo) Join(table schema.Tabler, on ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b baseFieldMappingsCombinedDo) LeftJoin(table schema.Tabler, on ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b baseFieldMappingsCombinedDo) RightJoin(table schema.Tabler, on ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b baseFieldMappingsCombinedDo) Group(cols ...field.Expr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b baseFieldMappingsCombinedDo) Having(conds ...gen.Condition) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b baseFieldMappingsCombinedDo) Limit(limit int) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b baseFieldMappingsCombinedDo) Offset(offset int) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b baseFieldMappingsCombinedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b baseFieldMappingsCombinedDo) Unscoped() *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Unscoped())
}

func (b baseFieldMappingsCombinedDo) Create(values ...*model.BaseFieldMappingsCombined) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b baseFieldMappingsCombinedDo) CreateInBatches(values []*model.BaseFieldMappingsCombined, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b baseFieldMappingsCombinedDo) Save(values ...*model.BaseFieldMappingsCombined) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b baseFieldMappingsCombinedDo) First() (*model.BaseFieldMappingsCombined, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BaseFieldMappingsCombined), nil
	}
}

func (b baseFieldMappingsCombinedDo) Take() (*model.BaseFieldMappingsCombined, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BaseFieldMappingsCombined), nil
	}
}

func (b baseFieldMappingsCombinedDo) Last() (*model.BaseFieldMappingsCombined, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BaseFieldMappingsCombined), nil
	}
}

func (b baseFieldMappingsCombinedDo) Find() ([]*model.BaseFieldMappingsCombined, error) {
	result, err := b.DO.Find()
	return result.([]*model.BaseFieldMappingsCombined), err
}

func (b baseFieldMappingsCombinedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BaseFieldMappingsCombined, err error) {
	buf := make([]*model.BaseFieldMappingsCombined, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b baseFieldMappingsCombinedDo) FindInBatches(result *[]*model.BaseFieldMappingsCombined, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b baseFieldMappingsCombinedDo) Attrs(attrs ...field.AssignExpr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b baseFieldMappingsCombinedDo) Assign(attrs ...field.AssignExpr) *baseFieldMappingsCombinedDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b baseFieldMappingsCombinedDo) Joins(fields ...field.RelationField) *baseFieldMappingsCombinedDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b baseFieldMappingsCombinedDo) Preload(fields ...field.RelationField) *baseFieldMappingsCombinedDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b baseFieldMappingsCombinedDo) FirstOrInit() (*model.BaseFieldMappingsCombined, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BaseFieldMappingsCombined), nil
	}
}

func (b baseFieldMappingsCombinedDo) FirstOrCreate() (*model.BaseFieldMappingsCombined, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BaseFieldMappingsCombined), nil
	}
}

func (b baseFieldMappingsCombinedDo) FindByPage(offset int, limit int) (result []*model.BaseFieldMappingsCombined, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b baseFieldMappingsCombinedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b baseFieldMappingsCombinedDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b baseFieldMappingsCombinedDo) Delete(models ...*model.BaseFieldMappingsCombined) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *baseFieldMappingsCombinedDo) withDO(do gen.Dao) *baseFieldMappingsCombinedDo {
	b.DO = *do.(*gen.DO)
	return b
}

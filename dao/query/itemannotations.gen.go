// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newItemAnnotation(db *gorm.DB, opts ...gen.DOOption) itemAnnotation {
	_itemAnnotation := itemAnnotation{}

	_itemAnnotation.itemAnnotationDo.UseDB(db, opts...)
	_itemAnnotation.itemAnnotationDo.UseModel(&model.ItemAnnotation{})

	tableName := _itemAnnotation.itemAnnotationDo.TableName()
	_itemAnnotation.ALL = field.NewAsterisk(tableName)
	_itemAnnotation.ItemID = field.NewInt32(tableName, "itemID")
	_itemAnnotation.ParentItemID = field.NewInt32(tableName, "parentItemID")
	_itemAnnotation.Type = field.NewInt32(tableName, "type")
	_itemAnnotation.AuthorName = field.NewString(tableName, "authorName")
	_itemAnnotation.Text = field.NewString(tableName, "text")
	_itemAnnotation.Comment = field.NewString(tableName, "comment")
	_itemAnnotation.Color = field.NewString(tableName, "color")
	_itemAnnotation.PageLabel = field.NewString(tableName, "pageLabel")
	_itemAnnotation.SortIndex = field.NewString(tableName, "sortIndex")
	_itemAnnotation.Position = field.NewString(tableName, "position")
	_itemAnnotation.IsExternal = field.NewInt32(tableName, "isExternal")

	_itemAnnotation.fillFieldMap()

	return _itemAnnotation
}

type itemAnnotation struct {
	itemAnnotationDo itemAnnotationDo

	ALL          field.Asterisk
	ItemID       field.Int32
	ParentItemID field.Int32
	Type         field.Int32
	AuthorName   field.String
	Text         field.String
	Comment      field.String
	Color        field.String
	PageLabel    field.String
	SortIndex    field.String
	Position     field.String
	IsExternal   field.Int32

	fieldMap map[string]field.Expr
}

func (i itemAnnotation) Table(newTableName string) *itemAnnotation {
	i.itemAnnotationDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemAnnotation) As(alias string) *itemAnnotation {
	i.itemAnnotationDo.DO = *(i.itemAnnotationDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemAnnotation) updateTableName(table string) *itemAnnotation {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewInt32(table, "itemID")
	i.ParentItemID = field.NewInt32(table, "parentItemID")
	i.Type = field.NewInt32(table, "type")
	i.AuthorName = field.NewString(table, "authorName")
	i.Text = field.NewString(table, "text")
	i.Comment = field.NewString(table, "comment")
	i.Color = field.NewString(table, "color")
	i.PageLabel = field.NewString(table, "pageLabel")
	i.SortIndex = field.NewString(table, "sortIndex")
	i.Position = field.NewString(table, "position")
	i.IsExternal = field.NewInt32(table, "isExternal")

	i.fillFieldMap()

	return i
}

func (i *itemAnnotation) WithContext(ctx context.Context) *itemAnnotationDo {
	return i.itemAnnotationDo.WithContext(ctx)
}

func (i itemAnnotation) TableName() string { return i.itemAnnotationDo.TableName() }

func (i itemAnnotation) Alias() string { return i.itemAnnotationDo.Alias() }

func (i itemAnnotation) Columns(cols ...field.Expr) gen.Columns {
	return i.itemAnnotationDo.Columns(cols...)
}

func (i *itemAnnotation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemAnnotation) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["itemID"] = i.ItemID
	i.fieldMap["parentItemID"] = i.ParentItemID
	i.fieldMap["type"] = i.Type
	i.fieldMap["authorName"] = i.AuthorName
	i.fieldMap["text"] = i.Text
	i.fieldMap["comment"] = i.Comment
	i.fieldMap["color"] = i.Color
	i.fieldMap["pageLabel"] = i.PageLabel
	i.fieldMap["sortIndex"] = i.SortIndex
	i.fieldMap["position"] = i.Position
	i.fieldMap["isExternal"] = i.IsExternal
}

func (i itemAnnotation) clone(db *gorm.DB) itemAnnotation {
	i.itemAnnotationDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemAnnotation) replaceDB(db *gorm.DB) itemAnnotation {
	i.itemAnnotationDo.ReplaceDB(db)
	return i
}

type itemAnnotationDo struct{ gen.DO }

func (i itemAnnotationDo) Debug() *itemAnnotationDo {
	return i.withDO(i.DO.Debug())
}

func (i itemAnnotationDo) WithContext(ctx context.Context) *itemAnnotationDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemAnnotationDo) ReadDB() *itemAnnotationDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemAnnotationDo) WriteDB() *itemAnnotationDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemAnnotationDo) Session(config *gorm.Session) *itemAnnotationDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemAnnotationDo) Clauses(conds ...clause.Expression) *itemAnnotationDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemAnnotationDo) Returning(value interface{}, columns ...string) *itemAnnotationDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemAnnotationDo) Not(conds ...gen.Condition) *itemAnnotationDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemAnnotationDo) Or(conds ...gen.Condition) *itemAnnotationDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemAnnotationDo) Select(conds ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemAnnotationDo) Where(conds ...gen.Condition) *itemAnnotationDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemAnnotationDo) Order(conds ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemAnnotationDo) Distinct(cols ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemAnnotationDo) Omit(cols ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemAnnotationDo) Join(table schema.Tabler, on ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemAnnotationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemAnnotationDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemAnnotationDo) Group(cols ...field.Expr) *itemAnnotationDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemAnnotationDo) Having(conds ...gen.Condition) *itemAnnotationDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemAnnotationDo) Limit(limit int) *itemAnnotationDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemAnnotationDo) Offset(offset int) *itemAnnotationDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemAnnotationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemAnnotationDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemAnnotationDo) Unscoped() *itemAnnotationDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemAnnotationDo) Create(values ...*model.ItemAnnotation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemAnnotationDo) CreateInBatches(values []*model.ItemAnnotation, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemAnnotationDo) Save(values ...*model.ItemAnnotation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemAnnotationDo) First() (*model.ItemAnnotation, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAnnotation), nil
	}
}

func (i itemAnnotationDo) Take() (*model.ItemAnnotation, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAnnotation), nil
	}
}

func (i itemAnnotationDo) Last() (*model.ItemAnnotation, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAnnotation), nil
	}
}

func (i itemAnnotationDo) Find() ([]*model.ItemAnnotation, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemAnnotation), err
}

func (i itemAnnotationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemAnnotation, err error) {
	buf := make([]*model.ItemAnnotation, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemAnnotationDo) FindInBatches(result *[]*model.ItemAnnotation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemAnnotationDo) Attrs(attrs ...field.AssignExpr) *itemAnnotationDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemAnnotationDo) Assign(attrs ...field.AssignExpr) *itemAnnotationDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemAnnotationDo) Joins(fields ...field.RelationField) *itemAnnotationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemAnnotationDo) Preload(fields ...field.RelationField) *itemAnnotationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemAnnotationDo) FirstOrInit() (*model.ItemAnnotation, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAnnotation), nil
	}
}

func (i itemAnnotationDo) FirstOrCreate() (*model.ItemAnnotation, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAnnotation), nil
	}
}

func (i itemAnnotationDo) FindByPage(offset int, limit int) (result []*model.ItemAnnotation, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemAnnotationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemAnnotationDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemAnnotationDo) Delete(models ...*model.ItemAnnotation) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemAnnotationDo) withDO(do gen.Dao) *itemAnnotationDo {
	i.DO = *do.(*gen.DO)
	return i
}

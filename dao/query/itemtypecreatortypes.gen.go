// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newItemTypeCreatorType(db *gorm.DB, opts ...gen.DOOption) itemTypeCreatorType {
	_itemTypeCreatorType := itemTypeCreatorType{}

	_itemTypeCreatorType.itemTypeCreatorTypeDo.UseDB(db, opts...)
	_itemTypeCreatorType.itemTypeCreatorTypeDo.UseModel(&model.ItemTypeCreatorType{})

	tableName := _itemTypeCreatorType.itemTypeCreatorTypeDo.TableName()
	_itemTypeCreatorType.ALL = field.NewAsterisk(tableName)
	_itemTypeCreatorType.ItemTypeID = field.NewInt32(tableName, "itemTypeID")
	_itemTypeCreatorType.CreatorTypeID = field.NewInt32(tableName, "creatorTypeID")
	_itemTypeCreatorType.PrimaryField = field.NewInt32(tableName, "primaryField")

	_itemTypeCreatorType.fillFieldMap()

	return _itemTypeCreatorType
}

type itemTypeCreatorType struct {
	itemTypeCreatorTypeDo itemTypeCreatorTypeDo

	ALL           field.Asterisk
	ItemTypeID    field.Int32
	CreatorTypeID field.Int32
	PrimaryField  field.Int32

	fieldMap map[string]field.Expr
}

func (i itemTypeCreatorType) Table(newTableName string) *itemTypeCreatorType {
	i.itemTypeCreatorTypeDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemTypeCreatorType) As(alias string) *itemTypeCreatorType {
	i.itemTypeCreatorTypeDo.DO = *(i.itemTypeCreatorTypeDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemTypeCreatorType) updateTableName(table string) *itemTypeCreatorType {
	i.ALL = field.NewAsterisk(table)
	i.ItemTypeID = field.NewInt32(table, "itemTypeID")
	i.CreatorTypeID = field.NewInt32(table, "creatorTypeID")
	i.PrimaryField = field.NewInt32(table, "primaryField")

	i.fillFieldMap()

	return i
}

func (i *itemTypeCreatorType) WithContext(ctx context.Context) *itemTypeCreatorTypeDo {
	return i.itemTypeCreatorTypeDo.WithContext(ctx)
}

func (i itemTypeCreatorType) TableName() string { return i.itemTypeCreatorTypeDo.TableName() }

func (i itemTypeCreatorType) Alias() string { return i.itemTypeCreatorTypeDo.Alias() }

func (i itemTypeCreatorType) Columns(cols ...field.Expr) gen.Columns {
	return i.itemTypeCreatorTypeDo.Columns(cols...)
}

func (i *itemTypeCreatorType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemTypeCreatorType) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 3)
	i.fieldMap["itemTypeID"] = i.ItemTypeID
	i.fieldMap["creatorTypeID"] = i.CreatorTypeID
	i.fieldMap["primaryField"] = i.PrimaryField
}

func (i itemTypeCreatorType) clone(db *gorm.DB) itemTypeCreatorType {
	i.itemTypeCreatorTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemTypeCreatorType) replaceDB(db *gorm.DB) itemTypeCreatorType {
	i.itemTypeCreatorTypeDo.ReplaceDB(db)
	return i
}

type itemTypeCreatorTypeDo struct{ gen.DO }

func (i itemTypeCreatorTypeDo) Debug() *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Debug())
}

func (i itemTypeCreatorTypeDo) WithContext(ctx context.Context) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemTypeCreatorTypeDo) ReadDB() *itemTypeCreatorTypeDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemTypeCreatorTypeDo) WriteDB() *itemTypeCreatorTypeDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemTypeCreatorTypeDo) Session(config *gorm.Session) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemTypeCreatorTypeDo) Clauses(conds ...clause.Expression) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemTypeCreatorTypeDo) Returning(value interface{}, columns ...string) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemTypeCreatorTypeDo) Not(conds ...gen.Condition) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemTypeCreatorTypeDo) Or(conds ...gen.Condition) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemTypeCreatorTypeDo) Select(conds ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemTypeCreatorTypeDo) Where(conds ...gen.Condition) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemTypeCreatorTypeDo) Order(conds ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemTypeCreatorTypeDo) Distinct(cols ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemTypeCreatorTypeDo) Omit(cols ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemTypeCreatorTypeDo) Join(table schema.Tabler, on ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemTypeCreatorTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemTypeCreatorTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemTypeCreatorTypeDo) Group(cols ...field.Expr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemTypeCreatorTypeDo) Having(conds ...gen.Condition) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemTypeCreatorTypeDo) Limit(limit int) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemTypeCreatorTypeDo) Offset(offset int) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemTypeCreatorTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemTypeCreatorTypeDo) Unscoped() *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemTypeCreatorTypeDo) Create(values ...*model.ItemTypeCreatorType) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemTypeCreatorTypeDo) CreateInBatches(values []*model.ItemTypeCreatorType, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemTypeCreatorTypeDo) Save(values ...*model.ItemTypeCreatorType) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemTypeCreatorTypeDo) First() (*model.ItemTypeCreatorType, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeCreatorType), nil
	}
}

func (i itemTypeCreatorTypeDo) Take() (*model.ItemTypeCreatorType, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeCreatorType), nil
	}
}

func (i itemTypeCreatorTypeDo) Last() (*model.ItemTypeCreatorType, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeCreatorType), nil
	}
}

func (i itemTypeCreatorTypeDo) Find() ([]*model.ItemTypeCreatorType, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemTypeCreatorType), err
}

func (i itemTypeCreatorTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemTypeCreatorType, err error) {
	buf := make([]*model.ItemTypeCreatorType, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemTypeCreatorTypeDo) FindInBatches(result *[]*model.ItemTypeCreatorType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemTypeCreatorTypeDo) Attrs(attrs ...field.AssignExpr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemTypeCreatorTypeDo) Assign(attrs ...field.AssignExpr) *itemTypeCreatorTypeDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemTypeCreatorTypeDo) Joins(fields ...field.RelationField) *itemTypeCreatorTypeDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemTypeCreatorTypeDo) Preload(fields ...field.RelationField) *itemTypeCreatorTypeDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemTypeCreatorTypeDo) FirstOrInit() (*model.ItemTypeCreatorType, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeCreatorType), nil
	}
}

func (i itemTypeCreatorTypeDo) FirstOrCreate() (*model.ItemTypeCreatorType, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeCreatorType), nil
	}
}

func (i itemTypeCreatorTypeDo) FindByPage(offset int, limit int) (result []*model.ItemTypeCreatorType, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemTypeCreatorTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemTypeCreatorTypeDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemTypeCreatorTypeDo) Delete(models ...*model.ItemTypeCreatorType) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemTypeCreatorTypeDo) withDO(do gen.Dao) *itemTypeCreatorTypeDo {
	i.DO = *do.(*gen.DO)
	return i
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newItemDatum(db *gorm.DB, opts ...gen.DOOption) itemDatum {
	_itemDatum := itemDatum{}

	_itemDatum.itemDatumDo.UseDB(db, opts...)
	_itemDatum.itemDatumDo.UseModel(&model.ItemDatum{})

	tableName := _itemDatum.itemDatumDo.TableName()
	_itemDatum.ALL = field.NewAsterisk(tableName)
	_itemDatum.ItemID = field.NewInt32(tableName, "itemID")
	_itemDatum.FieldID = field.NewInt32(tableName, "fieldID")
	_itemDatum.ValueID = field.NewString(tableName, "valueID")

	_itemDatum.fillFieldMap()

	return _itemDatum
}

type itemDatum struct {
	itemDatumDo itemDatumDo

	ALL     field.Asterisk
	ItemID  field.Int32
	FieldID field.Int32
	ValueID field.String

	fieldMap map[string]field.Expr
}

func (i itemDatum) Table(newTableName string) *itemDatum {
	i.itemDatumDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemDatum) As(alias string) *itemDatum {
	i.itemDatumDo.DO = *(i.itemDatumDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemDatum) updateTableName(table string) *itemDatum {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewInt32(table, "itemID")
	i.FieldID = field.NewInt32(table, "fieldID")
	i.ValueID = field.NewString(table, "valueID")

	i.fillFieldMap()

	return i
}

func (i *itemDatum) WithContext(ctx context.Context) *itemDatumDo {
	return i.itemDatumDo.WithContext(ctx)
}

func (i itemDatum) TableName() string { return i.itemDatumDo.TableName() }

func (i itemDatum) Alias() string { return i.itemDatumDo.Alias() }

func (i itemDatum) Columns(cols ...field.Expr) gen.Columns { return i.itemDatumDo.Columns(cols...) }

func (i *itemDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemDatum) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 3)
	i.fieldMap["itemID"] = i.ItemID
	i.fieldMap["fieldID"] = i.FieldID
	i.fieldMap["valueID"] = i.ValueID
}

func (i itemDatum) clone(db *gorm.DB) itemDatum {
	i.itemDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemDatum) replaceDB(db *gorm.DB) itemDatum {
	i.itemDatumDo.ReplaceDB(db)
	return i
}

type itemDatumDo struct{ gen.DO }

func (i itemDatumDo) Debug() *itemDatumDo {
	return i.withDO(i.DO.Debug())
}

func (i itemDatumDo) WithContext(ctx context.Context) *itemDatumDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemDatumDo) ReadDB() *itemDatumDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemDatumDo) WriteDB() *itemDatumDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemDatumDo) Session(config *gorm.Session) *itemDatumDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemDatumDo) Clauses(conds ...clause.Expression) *itemDatumDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemDatumDo) Returning(value interface{}, columns ...string) *itemDatumDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemDatumDo) Not(conds ...gen.Condition) *itemDatumDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemDatumDo) Or(conds ...gen.Condition) *itemDatumDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemDatumDo) Select(conds ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemDatumDo) Where(conds ...gen.Condition) *itemDatumDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemDatumDo) Order(conds ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemDatumDo) Distinct(cols ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemDatumDo) Omit(cols ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemDatumDo) Join(table schema.Tabler, on ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemDatumDo) Group(cols ...field.Expr) *itemDatumDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemDatumDo) Having(conds ...gen.Condition) *itemDatumDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemDatumDo) Limit(limit int) *itemDatumDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemDatumDo) Offset(offset int) *itemDatumDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemDatumDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemDatumDo) Unscoped() *itemDatumDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemDatumDo) Create(values ...*model.ItemDatum) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemDatumDo) CreateInBatches(values []*model.ItemDatum, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemDatumDo) Save(values ...*model.ItemDatum) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemDatumDo) First() (*model.ItemDatum, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemDatum), nil
	}
}

func (i itemDatumDo) Take() (*model.ItemDatum, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemDatum), nil
	}
}

func (i itemDatumDo) Last() (*model.ItemDatum, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemDatum), nil
	}
}

func (i itemDatumDo) Find() ([]*model.ItemDatum, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemDatum), err
}

func (i itemDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemDatum, err error) {
	buf := make([]*model.ItemDatum, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemDatumDo) FindInBatches(result *[]*model.ItemDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemDatumDo) Attrs(attrs ...field.AssignExpr) *itemDatumDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemDatumDo) Assign(attrs ...field.AssignExpr) *itemDatumDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemDatumDo) Joins(fields ...field.RelationField) *itemDatumDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemDatumDo) Preload(fields ...field.RelationField) *itemDatumDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemDatumDo) FirstOrInit() (*model.ItemDatum, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemDatum), nil
	}
}

func (i itemDatumDo) FirstOrCreate() (*model.ItemDatum, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemDatum), nil
	}
}

func (i itemDatumDo) FindByPage(offset int, limit int) (result []*model.ItemDatum, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemDatumDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemDatumDo) Delete(models ...*model.ItemDatum) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemDatumDo) withDO(do gen.Dao) *itemDatumDo {
	i.DO = *do.(*gen.DO)
	return i
}

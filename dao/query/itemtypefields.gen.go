// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newItemTypeField(db *gorm.DB, opts ...gen.DOOption) itemTypeField {
	_itemTypeField := itemTypeField{}

	_itemTypeField.itemTypeFieldDo.UseDB(db, opts...)
	_itemTypeField.itemTypeFieldDo.UseModel(&model.ItemTypeField{})

	tableName := _itemTypeField.itemTypeFieldDo.TableName()
	_itemTypeField.ALL = field.NewAsterisk(tableName)
	_itemTypeField.ItemTypeID = field.NewInt32(tableName, "itemTypeID")
	_itemTypeField.FieldID = field.NewInt32(tableName, "fieldID")
	_itemTypeField.Hide = field.NewInt32(tableName, "hide")
	_itemTypeField.OrderIndex = field.NewInt32(tableName, "orderIndex")

	_itemTypeField.fillFieldMap()

	return _itemTypeField
}

type itemTypeField struct {
	itemTypeFieldDo itemTypeFieldDo

	ALL        field.Asterisk
	ItemTypeID field.Int32
	FieldID    field.Int32
	Hide       field.Int32
	OrderIndex field.Int32

	fieldMap map[string]field.Expr
}

func (i itemTypeField) Table(newTableName string) *itemTypeField {
	i.itemTypeFieldDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemTypeField) As(alias string) *itemTypeField {
	i.itemTypeFieldDo.DO = *(i.itemTypeFieldDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemTypeField) updateTableName(table string) *itemTypeField {
	i.ALL = field.NewAsterisk(table)
	i.ItemTypeID = field.NewInt32(table, "itemTypeID")
	i.FieldID = field.NewInt32(table, "fieldID")
	i.Hide = field.NewInt32(table, "hide")
	i.OrderIndex = field.NewInt32(table, "orderIndex")

	i.fillFieldMap()

	return i
}

func (i *itemTypeField) WithContext(ctx context.Context) *itemTypeFieldDo {
	return i.itemTypeFieldDo.WithContext(ctx)
}

func (i itemTypeField) TableName() string { return i.itemTypeFieldDo.TableName() }

func (i itemTypeField) Alias() string { return i.itemTypeFieldDo.Alias() }

func (i itemTypeField) Columns(cols ...field.Expr) gen.Columns {
	return i.itemTypeFieldDo.Columns(cols...)
}

func (i *itemTypeField) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemTypeField) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["itemTypeID"] = i.ItemTypeID
	i.fieldMap["fieldID"] = i.FieldID
	i.fieldMap["hide"] = i.Hide
	i.fieldMap["orderIndex"] = i.OrderIndex
}

func (i itemTypeField) clone(db *gorm.DB) itemTypeField {
	i.itemTypeFieldDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemTypeField) replaceDB(db *gorm.DB) itemTypeField {
	i.itemTypeFieldDo.ReplaceDB(db)
	return i
}

type itemTypeFieldDo struct{ gen.DO }

func (i itemTypeFieldDo) Debug() *itemTypeFieldDo {
	return i.withDO(i.DO.Debug())
}

func (i itemTypeFieldDo) WithContext(ctx context.Context) *itemTypeFieldDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemTypeFieldDo) ReadDB() *itemTypeFieldDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemTypeFieldDo) WriteDB() *itemTypeFieldDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemTypeFieldDo) Session(config *gorm.Session) *itemTypeFieldDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemTypeFieldDo) Clauses(conds ...clause.Expression) *itemTypeFieldDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemTypeFieldDo) Returning(value interface{}, columns ...string) *itemTypeFieldDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemTypeFieldDo) Not(conds ...gen.Condition) *itemTypeFieldDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemTypeFieldDo) Or(conds ...gen.Condition) *itemTypeFieldDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemTypeFieldDo) Select(conds ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemTypeFieldDo) Where(conds ...gen.Condition) *itemTypeFieldDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemTypeFieldDo) Order(conds ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemTypeFieldDo) Distinct(cols ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemTypeFieldDo) Omit(cols ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemTypeFieldDo) Join(table schema.Tabler, on ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemTypeFieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemTypeFieldDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemTypeFieldDo) Group(cols ...field.Expr) *itemTypeFieldDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemTypeFieldDo) Having(conds ...gen.Condition) *itemTypeFieldDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemTypeFieldDo) Limit(limit int) *itemTypeFieldDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemTypeFieldDo) Offset(offset int) *itemTypeFieldDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemTypeFieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemTypeFieldDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemTypeFieldDo) Unscoped() *itemTypeFieldDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemTypeFieldDo) Create(values ...*model.ItemTypeField) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemTypeFieldDo) CreateInBatches(values []*model.ItemTypeField, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemTypeFieldDo) Save(values ...*model.ItemTypeField) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemTypeFieldDo) First() (*model.ItemTypeField, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeField), nil
	}
}

func (i itemTypeFieldDo) Take() (*model.ItemTypeField, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeField), nil
	}
}

func (i itemTypeFieldDo) Last() (*model.ItemTypeField, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeField), nil
	}
}

func (i itemTypeFieldDo) Find() ([]*model.ItemTypeField, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemTypeField), err
}

func (i itemTypeFieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemTypeField, err error) {
	buf := make([]*model.ItemTypeField, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemTypeFieldDo) FindInBatches(result *[]*model.ItemTypeField, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemTypeFieldDo) Attrs(attrs ...field.AssignExpr) *itemTypeFieldDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemTypeFieldDo) Assign(attrs ...field.AssignExpr) *itemTypeFieldDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemTypeFieldDo) Joins(fields ...field.RelationField) *itemTypeFieldDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemTypeFieldDo) Preload(fields ...field.RelationField) *itemTypeFieldDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemTypeFieldDo) FirstOrInit() (*model.ItemTypeField, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeField), nil
	}
}

func (i itemTypeFieldDo) FirstOrCreate() (*model.ItemTypeField, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTypeField), nil
	}
}

func (i itemTypeFieldDo) FindByPage(offset int, limit int) (result []*model.ItemTypeField, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemTypeFieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemTypeFieldDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemTypeFieldDo) Delete(models ...*model.ItemTypeField) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemTypeFieldDo) withDO(do gen.Dao) *itemTypeFieldDo {
	i.DO = *do.(*gen.DO)
	return i
}

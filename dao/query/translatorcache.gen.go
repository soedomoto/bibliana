// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newTranslatorCache(db *gorm.DB, opts ...gen.DOOption) translatorCache {
	_translatorCache := translatorCache{}

	_translatorCache.translatorCacheDo.UseDB(db, opts...)
	_translatorCache.translatorCacheDo.UseModel(&model.TranslatorCache{})

	tableName := _translatorCache.translatorCacheDo.TableName()
	_translatorCache.ALL = field.NewAsterisk(tableName)
	_translatorCache.FileName = field.NewString(tableName, "fileName")
	_translatorCache.MetadataJSON = field.NewString(tableName, "metadataJSON")
	_translatorCache.LastModifiedTime = field.NewInt32(tableName, "lastModifiedTime")

	_translatorCache.fillFieldMap()

	return _translatorCache
}

type translatorCache struct {
	translatorCacheDo translatorCacheDo

	ALL              field.Asterisk
	FileName         field.String
	MetadataJSON     field.String
	LastModifiedTime field.Int32

	fieldMap map[string]field.Expr
}

func (t translatorCache) Table(newTableName string) *translatorCache {
	t.translatorCacheDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t translatorCache) As(alias string) *translatorCache {
	t.translatorCacheDo.DO = *(t.translatorCacheDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *translatorCache) updateTableName(table string) *translatorCache {
	t.ALL = field.NewAsterisk(table)
	t.FileName = field.NewString(table, "fileName")
	t.MetadataJSON = field.NewString(table, "metadataJSON")
	t.LastModifiedTime = field.NewInt32(table, "lastModifiedTime")

	t.fillFieldMap()

	return t
}

func (t *translatorCache) WithContext(ctx context.Context) *translatorCacheDo {
	return t.translatorCacheDo.WithContext(ctx)
}

func (t translatorCache) TableName() string { return t.translatorCacheDo.TableName() }

func (t translatorCache) Alias() string { return t.translatorCacheDo.Alias() }

func (t translatorCache) Columns(cols ...field.Expr) gen.Columns {
	return t.translatorCacheDo.Columns(cols...)
}

func (t *translatorCache) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *translatorCache) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["fileName"] = t.FileName
	t.fieldMap["metadataJSON"] = t.MetadataJSON
	t.fieldMap["lastModifiedTime"] = t.LastModifiedTime
}

func (t translatorCache) clone(db *gorm.DB) translatorCache {
	t.translatorCacheDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t translatorCache) replaceDB(db *gorm.DB) translatorCache {
	t.translatorCacheDo.ReplaceDB(db)
	return t
}

type translatorCacheDo struct{ gen.DO }

func (t translatorCacheDo) Debug() *translatorCacheDo {
	return t.withDO(t.DO.Debug())
}

func (t translatorCacheDo) WithContext(ctx context.Context) *translatorCacheDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t translatorCacheDo) ReadDB() *translatorCacheDo {
	return t.Clauses(dbresolver.Read)
}

func (t translatorCacheDo) WriteDB() *translatorCacheDo {
	return t.Clauses(dbresolver.Write)
}

func (t translatorCacheDo) Session(config *gorm.Session) *translatorCacheDo {
	return t.withDO(t.DO.Session(config))
}

func (t translatorCacheDo) Clauses(conds ...clause.Expression) *translatorCacheDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t translatorCacheDo) Returning(value interface{}, columns ...string) *translatorCacheDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t translatorCacheDo) Not(conds ...gen.Condition) *translatorCacheDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t translatorCacheDo) Or(conds ...gen.Condition) *translatorCacheDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t translatorCacheDo) Select(conds ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t translatorCacheDo) Where(conds ...gen.Condition) *translatorCacheDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t translatorCacheDo) Order(conds ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t translatorCacheDo) Distinct(cols ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t translatorCacheDo) Omit(cols ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t translatorCacheDo) Join(table schema.Tabler, on ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t translatorCacheDo) LeftJoin(table schema.Tabler, on ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t translatorCacheDo) RightJoin(table schema.Tabler, on ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t translatorCacheDo) Group(cols ...field.Expr) *translatorCacheDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t translatorCacheDo) Having(conds ...gen.Condition) *translatorCacheDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t translatorCacheDo) Limit(limit int) *translatorCacheDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t translatorCacheDo) Offset(offset int) *translatorCacheDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t translatorCacheDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *translatorCacheDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t translatorCacheDo) Unscoped() *translatorCacheDo {
	return t.withDO(t.DO.Unscoped())
}

func (t translatorCacheDo) Create(values ...*model.TranslatorCache) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t translatorCacheDo) CreateInBatches(values []*model.TranslatorCache, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t translatorCacheDo) Save(values ...*model.TranslatorCache) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t translatorCacheDo) First() (*model.TranslatorCache, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TranslatorCache), nil
	}
}

func (t translatorCacheDo) Take() (*model.TranslatorCache, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TranslatorCache), nil
	}
}

func (t translatorCacheDo) Last() (*model.TranslatorCache, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TranslatorCache), nil
	}
}

func (t translatorCacheDo) Find() ([]*model.TranslatorCache, error) {
	result, err := t.DO.Find()
	return result.([]*model.TranslatorCache), err
}

func (t translatorCacheDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TranslatorCache, err error) {
	buf := make([]*model.TranslatorCache, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t translatorCacheDo) FindInBatches(result *[]*model.TranslatorCache, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t translatorCacheDo) Attrs(attrs ...field.AssignExpr) *translatorCacheDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t translatorCacheDo) Assign(attrs ...field.AssignExpr) *translatorCacheDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t translatorCacheDo) Joins(fields ...field.RelationField) *translatorCacheDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t translatorCacheDo) Preload(fields ...field.RelationField) *translatorCacheDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t translatorCacheDo) FirstOrInit() (*model.TranslatorCache, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TranslatorCache), nil
	}
}

func (t translatorCacheDo) FirstOrCreate() (*model.TranslatorCache, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TranslatorCache), nil
	}
}

func (t translatorCacheDo) FindByPage(offset int, limit int) (result []*model.TranslatorCache, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t translatorCacheDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t translatorCacheDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t translatorCacheDo) Delete(models ...*model.TranslatorCache) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *translatorCacheDo) withDO(do gen.Dao) *translatorCacheDo {
	t.DO = *do.(*gen.DO)
	return t
}

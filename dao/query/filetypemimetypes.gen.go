// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newFileTypeMimeType(db *gorm.DB, opts ...gen.DOOption) fileTypeMimeType {
	_fileTypeMimeType := fileTypeMimeType{}

	_fileTypeMimeType.fileTypeMimeTypeDo.UseDB(db, opts...)
	_fileTypeMimeType.fileTypeMimeTypeDo.UseModel(&model.FileTypeMimeType{})

	tableName := _fileTypeMimeType.fileTypeMimeTypeDo.TableName()
	_fileTypeMimeType.ALL = field.NewAsterisk(tableName)
	_fileTypeMimeType.FileTypeID = field.NewInt32(tableName, "fileTypeID")
	_fileTypeMimeType.MimeType = field.NewString(tableName, "mimeType")

	_fileTypeMimeType.fillFieldMap()

	return _fileTypeMimeType
}

type fileTypeMimeType struct {
	fileTypeMimeTypeDo fileTypeMimeTypeDo

	ALL        field.Asterisk
	FileTypeID field.Int32
	MimeType   field.String

	fieldMap map[string]field.Expr
}

func (f fileTypeMimeType) Table(newTableName string) *fileTypeMimeType {
	f.fileTypeMimeTypeDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileTypeMimeType) As(alias string) *fileTypeMimeType {
	f.fileTypeMimeTypeDo.DO = *(f.fileTypeMimeTypeDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileTypeMimeType) updateTableName(table string) *fileTypeMimeType {
	f.ALL = field.NewAsterisk(table)
	f.FileTypeID = field.NewInt32(table, "fileTypeID")
	f.MimeType = field.NewString(table, "mimeType")

	f.fillFieldMap()

	return f
}

func (f *fileTypeMimeType) WithContext(ctx context.Context) *fileTypeMimeTypeDo {
	return f.fileTypeMimeTypeDo.WithContext(ctx)
}

func (f fileTypeMimeType) TableName() string { return f.fileTypeMimeTypeDo.TableName() }

func (f fileTypeMimeType) Alias() string { return f.fileTypeMimeTypeDo.Alias() }

func (f fileTypeMimeType) Columns(cols ...field.Expr) gen.Columns {
	return f.fileTypeMimeTypeDo.Columns(cols...)
}

func (f *fileTypeMimeType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileTypeMimeType) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 2)
	f.fieldMap["fileTypeID"] = f.FileTypeID
	f.fieldMap["mimeType"] = f.MimeType
}

func (f fileTypeMimeType) clone(db *gorm.DB) fileTypeMimeType {
	f.fileTypeMimeTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileTypeMimeType) replaceDB(db *gorm.DB) fileTypeMimeType {
	f.fileTypeMimeTypeDo.ReplaceDB(db)
	return f
}

type fileTypeMimeTypeDo struct{ gen.DO }

func (f fileTypeMimeTypeDo) Debug() *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Debug())
}

func (f fileTypeMimeTypeDo) WithContext(ctx context.Context) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileTypeMimeTypeDo) ReadDB() *fileTypeMimeTypeDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileTypeMimeTypeDo) WriteDB() *fileTypeMimeTypeDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileTypeMimeTypeDo) Session(config *gorm.Session) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileTypeMimeTypeDo) Clauses(conds ...clause.Expression) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileTypeMimeTypeDo) Returning(value interface{}, columns ...string) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileTypeMimeTypeDo) Not(conds ...gen.Condition) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileTypeMimeTypeDo) Or(conds ...gen.Condition) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileTypeMimeTypeDo) Select(conds ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileTypeMimeTypeDo) Where(conds ...gen.Condition) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileTypeMimeTypeDo) Order(conds ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileTypeMimeTypeDo) Distinct(cols ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileTypeMimeTypeDo) Omit(cols ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileTypeMimeTypeDo) Join(table schema.Tabler, on ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileTypeMimeTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileTypeMimeTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileTypeMimeTypeDo) Group(cols ...field.Expr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileTypeMimeTypeDo) Having(conds ...gen.Condition) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileTypeMimeTypeDo) Limit(limit int) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileTypeMimeTypeDo) Offset(offset int) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileTypeMimeTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileTypeMimeTypeDo) Unscoped() *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileTypeMimeTypeDo) Create(values ...*model.FileTypeMimeType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileTypeMimeTypeDo) CreateInBatches(values []*model.FileTypeMimeType, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileTypeMimeTypeDo) Save(values ...*model.FileTypeMimeType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileTypeMimeTypeDo) First() (*model.FileTypeMimeType, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTypeMimeType), nil
	}
}

func (f fileTypeMimeTypeDo) Take() (*model.FileTypeMimeType, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTypeMimeType), nil
	}
}

func (f fileTypeMimeTypeDo) Last() (*model.FileTypeMimeType, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTypeMimeType), nil
	}
}

func (f fileTypeMimeTypeDo) Find() ([]*model.FileTypeMimeType, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileTypeMimeType), err
}

func (f fileTypeMimeTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileTypeMimeType, err error) {
	buf := make([]*model.FileTypeMimeType, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileTypeMimeTypeDo) FindInBatches(result *[]*model.FileTypeMimeType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileTypeMimeTypeDo) Attrs(attrs ...field.AssignExpr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileTypeMimeTypeDo) Assign(attrs ...field.AssignExpr) *fileTypeMimeTypeDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileTypeMimeTypeDo) Joins(fields ...field.RelationField) *fileTypeMimeTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileTypeMimeTypeDo) Preload(fields ...field.RelationField) *fileTypeMimeTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileTypeMimeTypeDo) FirstOrInit() (*model.FileTypeMimeType, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTypeMimeType), nil
	}
}

func (f fileTypeMimeTypeDo) FirstOrCreate() (*model.FileTypeMimeType, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTypeMimeType), nil
	}
}

func (f fileTypeMimeTypeDo) FindByPage(offset int, limit int) (result []*model.FileTypeMimeType, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileTypeMimeTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileTypeMimeTypeDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileTypeMimeTypeDo) Delete(models ...*model.FileTypeMimeType) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileTypeMimeTypeDo) withDO(do gen.Dao) *fileTypeMimeTypeDo {
	f.DO = *do.(*gen.DO)
	return f
}

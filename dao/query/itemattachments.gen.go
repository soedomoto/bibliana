// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newItemAttachment(db *gorm.DB, opts ...gen.DOOption) itemAttachment {
	_itemAttachment := itemAttachment{}

	_itemAttachment.itemAttachmentDo.UseDB(db, opts...)
	_itemAttachment.itemAttachmentDo.UseModel(&model.ItemAttachment{})

	tableName := _itemAttachment.itemAttachmentDo.TableName()
	_itemAttachment.ALL = field.NewAsterisk(tableName)
	_itemAttachment.ItemID = field.NewInt32(tableName, "itemID")
	_itemAttachment.ParentItemID = field.NewInt32(tableName, "parentItemID")
	_itemAttachment.LinkMode = field.NewInt32(tableName, "linkMode")
	_itemAttachment.ContentType = field.NewString(tableName, "contentType")
	_itemAttachment.CharsetID = field.NewInt32(tableName, "charsetID")
	_itemAttachment.Path = field.NewString(tableName, "path")
	_itemAttachment.SyncState = field.NewInt32(tableName, "syncState")
	_itemAttachment.StorageModTime = field.NewInt32(tableName, "storageModTime")
	_itemAttachment.StorageHash = field.NewString(tableName, "storageHash")
	_itemAttachment.LastProcessedModificationTime = field.NewInt32(tableName, "lastProcessedModificationTime")

	_itemAttachment.fillFieldMap()

	return _itemAttachment
}

type itemAttachment struct {
	itemAttachmentDo itemAttachmentDo

	ALL                           field.Asterisk
	ItemID                        field.Int32
	ParentItemID                  field.Int32
	LinkMode                      field.Int32
	ContentType                   field.String
	CharsetID                     field.Int32
	Path                          field.String
	SyncState                     field.Int32
	StorageModTime                field.Int32
	StorageHash                   field.String
	LastProcessedModificationTime field.Int32

	fieldMap map[string]field.Expr
}

func (i itemAttachment) Table(newTableName string) *itemAttachment {
	i.itemAttachmentDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemAttachment) As(alias string) *itemAttachment {
	i.itemAttachmentDo.DO = *(i.itemAttachmentDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemAttachment) updateTableName(table string) *itemAttachment {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewInt32(table, "itemID")
	i.ParentItemID = field.NewInt32(table, "parentItemID")
	i.LinkMode = field.NewInt32(table, "linkMode")
	i.ContentType = field.NewString(table, "contentType")
	i.CharsetID = field.NewInt32(table, "charsetID")
	i.Path = field.NewString(table, "path")
	i.SyncState = field.NewInt32(table, "syncState")
	i.StorageModTime = field.NewInt32(table, "storageModTime")
	i.StorageHash = field.NewString(table, "storageHash")
	i.LastProcessedModificationTime = field.NewInt32(table, "lastProcessedModificationTime")

	i.fillFieldMap()

	return i
}

func (i *itemAttachment) WithContext(ctx context.Context) *itemAttachmentDo {
	return i.itemAttachmentDo.WithContext(ctx)
}

func (i itemAttachment) TableName() string { return i.itemAttachmentDo.TableName() }

func (i itemAttachment) Alias() string { return i.itemAttachmentDo.Alias() }

func (i itemAttachment) Columns(cols ...field.Expr) gen.Columns {
	return i.itemAttachmentDo.Columns(cols...)
}

func (i *itemAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemAttachment) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 10)
	i.fieldMap["itemID"] = i.ItemID
	i.fieldMap["parentItemID"] = i.ParentItemID
	i.fieldMap["linkMode"] = i.LinkMode
	i.fieldMap["contentType"] = i.ContentType
	i.fieldMap["charsetID"] = i.CharsetID
	i.fieldMap["path"] = i.Path
	i.fieldMap["syncState"] = i.SyncState
	i.fieldMap["storageModTime"] = i.StorageModTime
	i.fieldMap["storageHash"] = i.StorageHash
	i.fieldMap["lastProcessedModificationTime"] = i.LastProcessedModificationTime
}

func (i itemAttachment) clone(db *gorm.DB) itemAttachment {
	i.itemAttachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemAttachment) replaceDB(db *gorm.DB) itemAttachment {
	i.itemAttachmentDo.ReplaceDB(db)
	return i
}

type itemAttachmentDo struct{ gen.DO }

func (i itemAttachmentDo) Debug() *itemAttachmentDo {
	return i.withDO(i.DO.Debug())
}

func (i itemAttachmentDo) WithContext(ctx context.Context) *itemAttachmentDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemAttachmentDo) ReadDB() *itemAttachmentDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemAttachmentDo) WriteDB() *itemAttachmentDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemAttachmentDo) Session(config *gorm.Session) *itemAttachmentDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemAttachmentDo) Clauses(conds ...clause.Expression) *itemAttachmentDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemAttachmentDo) Returning(value interface{}, columns ...string) *itemAttachmentDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemAttachmentDo) Not(conds ...gen.Condition) *itemAttachmentDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemAttachmentDo) Or(conds ...gen.Condition) *itemAttachmentDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemAttachmentDo) Select(conds ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemAttachmentDo) Where(conds ...gen.Condition) *itemAttachmentDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemAttachmentDo) Order(conds ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemAttachmentDo) Distinct(cols ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemAttachmentDo) Omit(cols ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemAttachmentDo) Join(table schema.Tabler, on ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemAttachmentDo) Group(cols ...field.Expr) *itemAttachmentDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemAttachmentDo) Having(conds ...gen.Condition) *itemAttachmentDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemAttachmentDo) Limit(limit int) *itemAttachmentDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemAttachmentDo) Offset(offset int) *itemAttachmentDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemAttachmentDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemAttachmentDo) Unscoped() *itemAttachmentDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemAttachmentDo) Create(values ...*model.ItemAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemAttachmentDo) CreateInBatches(values []*model.ItemAttachment, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemAttachmentDo) Save(values ...*model.ItemAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemAttachmentDo) First() (*model.ItemAttachment, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAttachment), nil
	}
}

func (i itemAttachmentDo) Take() (*model.ItemAttachment, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAttachment), nil
	}
}

func (i itemAttachmentDo) Last() (*model.ItemAttachment, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAttachment), nil
	}
}

func (i itemAttachmentDo) Find() ([]*model.ItemAttachment, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemAttachment), err
}

func (i itemAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemAttachment, err error) {
	buf := make([]*model.ItemAttachment, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemAttachmentDo) FindInBatches(result *[]*model.ItemAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemAttachmentDo) Attrs(attrs ...field.AssignExpr) *itemAttachmentDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemAttachmentDo) Assign(attrs ...field.AssignExpr) *itemAttachmentDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemAttachmentDo) Joins(fields ...field.RelationField) *itemAttachmentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemAttachmentDo) Preload(fields ...field.RelationField) *itemAttachmentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemAttachmentDo) FirstOrInit() (*model.ItemAttachment, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAttachment), nil
	}
}

func (i itemAttachmentDo) FirstOrCreate() (*model.ItemAttachment, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAttachment), nil
	}
}

func (i itemAttachmentDo) FindByPage(offset int, limit int) (result []*model.ItemAttachment, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemAttachmentDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemAttachmentDo) Delete(models ...*model.ItemAttachment) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemAttachmentDo) withDO(do gen.Dao) *itemAttachmentDo {
	i.DO = *do.(*gen.DO)
	return i
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newCollectionItem(db *gorm.DB, opts ...gen.DOOption) collectionItem {
	_collectionItem := collectionItem{}

	_collectionItem.collectionItemDo.UseDB(db, opts...)
	_collectionItem.collectionItemDo.UseModel(&model.CollectionItem{})

	tableName := _collectionItem.collectionItemDo.TableName()
	_collectionItem.ALL = field.NewAsterisk(tableName)
	_collectionItem.CollectionID = field.NewInt32(tableName, "collectionID")
	_collectionItem.ItemID = field.NewInt32(tableName, "itemID")
	_collectionItem.OrderIndex = field.NewInt32(tableName, "orderIndex")

	_collectionItem.fillFieldMap()

	return _collectionItem
}

type collectionItem struct {
	collectionItemDo collectionItemDo

	ALL          field.Asterisk
	CollectionID field.Int32
	ItemID       field.Int32
	OrderIndex   field.Int32

	fieldMap map[string]field.Expr
}

func (c collectionItem) Table(newTableName string) *collectionItem {
	c.collectionItemDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collectionItem) As(alias string) *collectionItem {
	c.collectionItemDo.DO = *(c.collectionItemDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collectionItem) updateTableName(table string) *collectionItem {
	c.ALL = field.NewAsterisk(table)
	c.CollectionID = field.NewInt32(table, "collectionID")
	c.ItemID = field.NewInt32(table, "itemID")
	c.OrderIndex = field.NewInt32(table, "orderIndex")

	c.fillFieldMap()

	return c
}

func (c *collectionItem) WithContext(ctx context.Context) *collectionItemDo {
	return c.collectionItemDo.WithContext(ctx)
}

func (c collectionItem) TableName() string { return c.collectionItemDo.TableName() }

func (c collectionItem) Alias() string { return c.collectionItemDo.Alias() }

func (c collectionItem) Columns(cols ...field.Expr) gen.Columns {
	return c.collectionItemDo.Columns(cols...)
}

func (c *collectionItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collectionItem) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["collectionID"] = c.CollectionID
	c.fieldMap["itemID"] = c.ItemID
	c.fieldMap["orderIndex"] = c.OrderIndex
}

func (c collectionItem) clone(db *gorm.DB) collectionItem {
	c.collectionItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collectionItem) replaceDB(db *gorm.DB) collectionItem {
	c.collectionItemDo.ReplaceDB(db)
	return c
}

type collectionItemDo struct{ gen.DO }

func (c collectionItemDo) Debug() *collectionItemDo {
	return c.withDO(c.DO.Debug())
}

func (c collectionItemDo) WithContext(ctx context.Context) *collectionItemDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectionItemDo) ReadDB() *collectionItemDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectionItemDo) WriteDB() *collectionItemDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectionItemDo) Session(config *gorm.Session) *collectionItemDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectionItemDo) Clauses(conds ...clause.Expression) *collectionItemDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectionItemDo) Returning(value interface{}, columns ...string) *collectionItemDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectionItemDo) Not(conds ...gen.Condition) *collectionItemDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectionItemDo) Or(conds ...gen.Condition) *collectionItemDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectionItemDo) Select(conds ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectionItemDo) Where(conds ...gen.Condition) *collectionItemDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectionItemDo) Order(conds ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectionItemDo) Distinct(cols ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectionItemDo) Omit(cols ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectionItemDo) Join(table schema.Tabler, on ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectionItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectionItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectionItemDo) Group(cols ...field.Expr) *collectionItemDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectionItemDo) Having(conds ...gen.Condition) *collectionItemDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectionItemDo) Limit(limit int) *collectionItemDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectionItemDo) Offset(offset int) *collectionItemDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectionItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *collectionItemDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectionItemDo) Unscoped() *collectionItemDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectionItemDo) Create(values ...*model.CollectionItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectionItemDo) CreateInBatches(values []*model.CollectionItem, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectionItemDo) Save(values ...*model.CollectionItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectionItemDo) First() (*model.CollectionItem, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionItem), nil
	}
}

func (c collectionItemDo) Take() (*model.CollectionItem, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionItem), nil
	}
}

func (c collectionItemDo) Last() (*model.CollectionItem, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionItem), nil
	}
}

func (c collectionItemDo) Find() ([]*model.CollectionItem, error) {
	result, err := c.DO.Find()
	return result.([]*model.CollectionItem), err
}

func (c collectionItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectionItem, err error) {
	buf := make([]*model.CollectionItem, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectionItemDo) FindInBatches(result *[]*model.CollectionItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectionItemDo) Attrs(attrs ...field.AssignExpr) *collectionItemDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectionItemDo) Assign(attrs ...field.AssignExpr) *collectionItemDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectionItemDo) Joins(fields ...field.RelationField) *collectionItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectionItemDo) Preload(fields ...field.RelationField) *collectionItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectionItemDo) FirstOrInit() (*model.CollectionItem, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionItem), nil
	}
}

func (c collectionItemDo) FirstOrCreate() (*model.CollectionItem, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionItem), nil
	}
}

func (c collectionItemDo) FindByPage(offset int, limit int) (result []*model.CollectionItem, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectionItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectionItemDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectionItemDo) Delete(models ...*model.CollectionItem) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectionItemDo) withDO(do gen.Dao) *collectionItemDo {
	c.DO = *do.(*gen.DO)
	return c
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bibliana/dao/model"
)

func newFeedItem(db *gorm.DB, opts ...gen.DOOption) feedItem {
	_feedItem := feedItem{}

	_feedItem.feedItemDo.UseDB(db, opts...)
	_feedItem.feedItemDo.UseModel(&model.FeedItem{})

	tableName := _feedItem.feedItemDo.TableName()
	_feedItem.ALL = field.NewAsterisk(tableName)
	_feedItem.ItemID = field.NewInt32(tableName, "itemID")
	_feedItem.GUID = field.NewString(tableName, "guid")
	_feedItem.ReadTime = field.NewTime(tableName, "readTime")
	_feedItem.TranslatedTime = field.NewTime(tableName, "translatedTime")

	_feedItem.fillFieldMap()

	return _feedItem
}

type feedItem struct {
	feedItemDo feedItemDo

	ALL            field.Asterisk
	ItemID         field.Int32
	GUID           field.String
	ReadTime       field.Time
	TranslatedTime field.Time

	fieldMap map[string]field.Expr
}

func (f feedItem) Table(newTableName string) *feedItem {
	f.feedItemDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f feedItem) As(alias string) *feedItem {
	f.feedItemDo.DO = *(f.feedItemDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *feedItem) updateTableName(table string) *feedItem {
	f.ALL = field.NewAsterisk(table)
	f.ItemID = field.NewInt32(table, "itemID")
	f.GUID = field.NewString(table, "guid")
	f.ReadTime = field.NewTime(table, "readTime")
	f.TranslatedTime = field.NewTime(table, "translatedTime")

	f.fillFieldMap()

	return f
}

func (f *feedItem) WithContext(ctx context.Context) *feedItemDo { return f.feedItemDo.WithContext(ctx) }

func (f feedItem) TableName() string { return f.feedItemDo.TableName() }

func (f feedItem) Alias() string { return f.feedItemDo.Alias() }

func (f feedItem) Columns(cols ...field.Expr) gen.Columns { return f.feedItemDo.Columns(cols...) }

func (f *feedItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *feedItem) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["itemID"] = f.ItemID
	f.fieldMap["guid"] = f.GUID
	f.fieldMap["readTime"] = f.ReadTime
	f.fieldMap["translatedTime"] = f.TranslatedTime
}

func (f feedItem) clone(db *gorm.DB) feedItem {
	f.feedItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f feedItem) replaceDB(db *gorm.DB) feedItem {
	f.feedItemDo.ReplaceDB(db)
	return f
}

type feedItemDo struct{ gen.DO }

func (f feedItemDo) Debug() *feedItemDo {
	return f.withDO(f.DO.Debug())
}

func (f feedItemDo) WithContext(ctx context.Context) *feedItemDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feedItemDo) ReadDB() *feedItemDo {
	return f.Clauses(dbresolver.Read)
}

func (f feedItemDo) WriteDB() *feedItemDo {
	return f.Clauses(dbresolver.Write)
}

func (f feedItemDo) Session(config *gorm.Session) *feedItemDo {
	return f.withDO(f.DO.Session(config))
}

func (f feedItemDo) Clauses(conds ...clause.Expression) *feedItemDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feedItemDo) Returning(value interface{}, columns ...string) *feedItemDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f feedItemDo) Not(conds ...gen.Condition) *feedItemDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feedItemDo) Or(conds ...gen.Condition) *feedItemDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feedItemDo) Select(conds ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feedItemDo) Where(conds ...gen.Condition) *feedItemDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feedItemDo) Order(conds ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feedItemDo) Distinct(cols ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feedItemDo) Omit(cols ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feedItemDo) Join(table schema.Tabler, on ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feedItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feedItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feedItemDo) Group(cols ...field.Expr) *feedItemDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feedItemDo) Having(conds ...gen.Condition) *feedItemDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feedItemDo) Limit(limit int) *feedItemDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feedItemDo) Offset(offset int) *feedItemDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feedItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *feedItemDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feedItemDo) Unscoped() *feedItemDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feedItemDo) Create(values ...*model.FeedItem) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feedItemDo) CreateInBatches(values []*model.FeedItem, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feedItemDo) Save(values ...*model.FeedItem) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feedItemDo) First() (*model.FeedItem, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedItem), nil
	}
}

func (f feedItemDo) Take() (*model.FeedItem, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedItem), nil
	}
}

func (f feedItemDo) Last() (*model.FeedItem, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedItem), nil
	}
}

func (f feedItemDo) Find() ([]*model.FeedItem, error) {
	result, err := f.DO.Find()
	return result.([]*model.FeedItem), err
}

func (f feedItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FeedItem, err error) {
	buf := make([]*model.FeedItem, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feedItemDo) FindInBatches(result *[]*model.FeedItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feedItemDo) Attrs(attrs ...field.AssignExpr) *feedItemDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feedItemDo) Assign(attrs ...field.AssignExpr) *feedItemDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feedItemDo) Joins(fields ...field.RelationField) *feedItemDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f feedItemDo) Preload(fields ...field.RelationField) *feedItemDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f feedItemDo) FirstOrInit() (*model.FeedItem, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedItem), nil
	}
}

func (f feedItemDo) FirstOrCreate() (*model.FeedItem, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedItem), nil
	}
}

func (f feedItemDo) FindByPage(offset int, limit int) (result []*model.FeedItem, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f feedItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f feedItemDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f feedItemDo) Delete(models ...*model.FeedItem) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *feedItemDo) withDO(do gen.Dao) *feedItemDo {
	f.DO = *do.(*gen.DO)
	return f
}
